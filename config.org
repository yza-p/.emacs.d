#+Title: Yay-Evil distro by Ian Y.E. Pan
#+Author: Ian Y.E. Pan
#+Date: 2019

* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source Code". The variable ~ian/indent-width~ controls the default indentation across various programming modes. The default is 4, you can change this variable to 2 or any other indentation width you prefer, and the change will be made across all programming language modes including C, C++, Java, Python etc. (Exception: JavaScript defaults to 2-space indent, you can still set it to any other indentation width you prefer in the ~web-mode~ section.)
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar ian/indent-width 4) ; change this value to your preferred width
    :config
    (setq frame-title-format '("yzaa - ಠ_ಠ") ; Yayyyyy Evil!
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; > 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width ian/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t)

    ;; Vertico config
    ;; Enable commands in the minibuffer
    (setq enable-recursive-minibuffers t)

    ;; From the old config
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq blink-cursor-mode nil)
    )


  ;; The Emacs default split doesn't seem too intuitive for most users.
  (use-package emacs
    :ensure nil
    :preface
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ian/split-and-follow-vertically))

  (use-package "startup"
    :ensure nil
    :config
    (setq initial-scratch-message ""))
#+END_SRC

* Configuration for built-in packages
Since we're using use-package as our package management system, we might as well try to organize under the same syntax as much as possible to keep the configuration consistent. The option ~use-package-always-ensure~ is turned on in ~init.el~, so we'll add ~:ensure nil~ when configuring the built-in packages.
** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC

** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC

** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC

** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC

** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default)
to the more standard K&R. Here we also set the indentation width of C,
C++, Java, and Python to the preferred value defined in
~ian/indent-width~ (all languages default to 4, except JavaScript,
which is 2, as controlled in ~web-mode~). Of course, you can change
the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset ian/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; Python (both v2 and v3)
  (use-package python
    :ensure nil
    :config (setq python-indent-offset ian/indent-width))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Setting up some frame defaults
Maximize the frame by default on start-up. Set the font to size 12.
#+BEGIN_SRC emacs-lisp
  ;; (use-package frame
  ;;   :preface
  ;;   (defun ian/set-default-font ()
  ;;     (interactive)
  ;;     (when (member "Consolas" (font-family-list))
  ;;       (set-face-attribute 'default nil :family "Consolas"))
  ;;     (set-face-attribute 'default nil
  ;;                         :height 150
  ;;                         :weight 'normal))
  ;;   :ensure nil
  ;;   :config
  ;;   ;; (setq initial-frame-alist '((fullscreen . maximized)))
  ;;   (ian/set-default-font))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC
* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely
fine! However, one of the goals of the Yay-Evil distro is to provide
an essential-only foundation for users to build upon. Therefore, only
the most important packages and/or lightweight improvements will be
included here. For example, completion frameworks like Ivy or Helm are
considered heavy by many, yet the built-in Ido serves almost the same
purpose. The only arguably opinionated package is probably Evil, but
you probably saw that coming from the distro name, didn't you ;) ? If
you prefer the default keybindings, simply disable the section that
controls the Evil behaviors.

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Load custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
  (load-theme 'poet-dark t)
#+END_SRC

*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 3
          dashboard-banner-logo-title "PKM v3!"
          dashboard-items nil))
#+END_SRC

**** Dashboard custom quotes
Stolen from this [[https://www.reddit.com/r/emacs/comments/kkujqe/emacs_dashboard_configuration/][reddit guy]]
#+BEGIN_SRC emacs-lisp
  ;; Read file as list of lines
   ;; http://ergoemacs.org/emacs/elisp_read_file_content.html
   (defun read-lines (filePath)
     "Return a list of lines of a file at filePath."
     (with-temp-buffer
       (insert-file-contents filePath)
       (split-string (buffer-string) "\n" t)))
   ;; Use file as random footer message
   ;; Created with quotes.org roam file
   (setq dashboard-footer-messages (read-lines "~/.emacs.d/external/dashboard-quotes.txt"))
#+END_SRC

*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC

** Vi keybindings
I personally find Vi(m) bindings to be the most efficient way of
editing text (especially code). I also changed the default ~:q~ and
~:wq~ to be killing current buffer, instead of killing the frame or
subsequently killing Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-shift-width ian/indent-width)
    :hook (after-init . evil-mode)
    :preface
    (defun ian/save-and-kill-this-buffer ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    :config
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil))
    (evil-ex-define-cmd "q" #'kill-this-buffer)
    (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer)

    (add-hook 'evil-insert-state-exit-hook 'save-buffer)
    )
#+END_SRC
Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC
Emulates tpope's vim commentary package (Use ~gcc~ to comment out a line,
~gc~ to comment out the target of a motion (for example, ~gcap~ to
comment out a paragraph), ~gc~ in visual mode to comment out the
selection etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC

** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+END_SRC

** Searching/sorting enhancements & project management
*** CANC Ido, ido-vertical, ido-ubiquitous and fuzzy matching
Selecting buffers/files with great efficiency. In my opinion, Ido is
enough to replace Ivy/Counsel and Helm. We install ido-vertical to get
a better view of the available options (use ~C-n~, ~C-p~ or arrow keys
to navigate)
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC
*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  ;; (use-package org
  ;; :hook ((org-mode . visual-line-mode)
  ;;        (org-mode . org-indent-mode)))

  ;; (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC
*** Useful major modes
Markdown mode and Web mode, the latter covers our usages of HTML/CSS/JS/JSX/TS/TSX/JSON.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC
** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword we've been using in
other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
*** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
* Yza Config - Built-in
** Modifiers for mac
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (setq mac-command-modifier 'super
          mac-option-modifier 'meta
          mac-control-modifier 'control
          mac-function-modifier 'hyper))
#+END_SRC

** Alerts
#+BEGIN_SRC emacs-lisp
  (use-package alert
    :config
    (if (eq system-type 'darwin)
        (setq
         alert-default-style 'osx-notifier
         )))
#+END_SRC

** Buffer travel using windmove
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings 'super)
  (winner-mode 1)
#+END_SRC

** Switch to scratch
#+BEGIN_SRC emacs-lisp
  (defun switch-to-scratch-buffer ()
    "Switch to the current session's scratch buffer."
    (interactive)
    (switch-to-buffer "*scratch*"))
  (bind-key "H-," #'switch-to-scratch-buffer)
#+END_SRC

** Replace default org-cycle to include properties too
Credit to lawliet from stackoverflow [[https://stackoverflow.com/a/17492723][[link]​]]
#+BEGIN_SRC emacs-lisp
  (defun org-cycle-hide-drawers (state)
    "Re-hide all drawers after a visibility state change."
    (when (and (derived-mode-p 'org-mode)
               (not (memq state '(overview folded contents))))
      (save-excursion
        (let* ((globalp (memq state '(contents all)))
               (beg (if globalp
                        (point-min)
                      (point)))
               (end (if globalp
                        (point-max)
                      (if (eq state 'children)
                          (save-excursion
                            (outline-next-heading)
                            (point))
                        (org-end-of-subtree t)))))
          (goto-char beg)
          (while (re-search-forward org-drawer-regexp end t)
            (save-excursion
              (beginning-of-line 1)
              (when (looking-at org-drawer-regexp)
                (let* ((start (1- (match-beginning 0)))
                       (limit
                        (save-excursion
                          (outline-next-heading)
                          (point)))
                       (msg (format
                             (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                             (1+ start))))
                  (if (re-search-forward "^[ \t]*:END:" limit t)
                      (outline-flag-region start (point-at-eol) t)
                    (user-error msg))))))))))



  (defun org-cycle-internal-local ()
    "Do the local cycling action."
    (let ((goal-column 0) eoh eol eos has-children children-skipped struct)
      ;; First, determine end of headline (EOH), end of subtree or item
      ;; (EOS), and if item or heading has children (HAS-CHILDREN).
      (save-excursion
        (if (org-at-item-p)
            (progn
              (beginning-of-line)
              (setq struct (org-list-struct))
              (setq eoh (point-at-eol))
              (setq eos (org-list-get-item-end-before-blank (point) struct))
              (setq has-children (org-list-has-child-p (point) struct)))
          (org-back-to-heading)
          (setq eoh (save-excursion (outline-end-of-heading) (point)))
          (setq eos (save-excursion
                      (org-end-of-subtree t t)
                      (unless (eobp) (forward-char -1))
                      (point)))
          (setq has-children
                (or
                 (save-excursion
                   (let ((level (funcall outline-level)))
                     (outline-next-heading)
                     (and (org-at-heading-p t)
                          (> (funcall outline-level) level))))
                 (and (eq org-cycle-include-plain-lists 'integrate)
                      (save-excursion
                        (org-list-search-forward (org-item-beginning-re) eos t))))))
        ;; Determine end invisible part of buffer (EOL)
        (beginning-of-line 2)
        (while (and (not (eobp))		;this is like `next-line'
                    (get-char-property (1- (point)) 'invisible))
          (goto-char (next-single-char-property-change (point) 'invisible))
          (and (eolp) (beginning-of-line 2)))
        (setq eol (point)))
      ;; Find out what to do next and set `this-command'
      (cond
       ((= eos eoh)
        ;; Nothing is hidden behind this heading
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'empty))
        (org-unlogged-message "EMPTY ENTRY")
        (setq org-cycle-subtree-status nil)
        (save-excursion
          (goto-char eos)
          (outline-next-heading)
          (when (org-invisible-p) (org-flag-heading nil))))
       ((and (or (>= eol eos)
                 (not (string-match "\\S-" (buffer-substring eol eos))))
             (or has-children
                 (not (setq children-skipped
                            org-cycle-skip-children-state-if-no-children))))
        ;; Entire subtree is hidden in one line: children view
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'children))
        (if (org-at-item-p)
            (org-list-set-item-visibility (point-at-bol) struct 'children)
          (org-show-entry)
          (org-with-limited-levels (org-show-children))
          (org-show-set-visibility 'tree)
          ;; Fold every list in subtree to top-level items.
          (when (eq org-cycle-include-plain-lists 'integrate)
            (save-excursion
              (org-back-to-heading)
              (while (org-list-search-forward (org-item-beginning-re) eos t)
                (beginning-of-line 1)
                (let* ((struct (org-list-struct))
                       (prevs (org-list-prevs-alist struct))
                       (end (org-list-get-bottom-point struct)))
                  (dolist (e (org-list-get-all-items (point) struct prevs))
                    (org-list-set-item-visibility e struct 'folded))
                  (goto-char (if (< end eos) end eos)))))))
        (org-unlogged-message "CHILDREN")
        (save-excursion
          (goto-char eos)
          (outline-next-heading)
          (when (org-invisible-p) (org-flag-heading nil)))
        (setq org-cycle-subtree-status 'children)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-cycle-hook 'children)))

       ;; transplant
       ((eq org-cycle-subtree-status 'subtree)
        (org-show-subtree)
        (org-unlogged-message "ALL")
        (setq org-cycle-subtree-status 'all))

       ((or children-skipped
            (and (eq last-command this-command)
                 (eq org-cycle-subtree-status 'children)))
        ;; We just showed the children, or no children are there,
        ;; now show everything.
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'subtree))
        (org-flag-region eoh eos nil 'outline)
        (org-unlogged-message
         (if children-skipped "SUBTREE (NO CHILDREN)" "SUBTREE"))
        (setq org-cycle-subtree-status 'subtree)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-cycle-hook 'subtree)))

       (t
        ;; Default action: hide the subtree.
        (run-hook-with-args 'org-pre-cycle-hook 'folded)
        (org-flag-region eoh eos t 'outline)
        (org-unlogged-message "FOLDED")
        (setq org-cycle-subtree-status 'folded)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-cycle-hook 'folded))))))
#+END_SRC

** Window configurations (defuns)
#+BEGIN_SRC emacs-lisp
  (defun yza/default-window-setup ()
    "Called by emacs-startup-hook to set up my initial window configuration."
    (org-agenda nil "0")
    (split-window-right)
    (find-file "~/Dropbox/org/journal/2022-Q2.org"))

  (defun yza/default-fast-window-setup ()
    "Called by emacs-startup-hook to set up my initial window configuration."
    (split-window-below)
    (split-window-right))

  (defun yza/switch-to-agenda ()
    (interactive)
    "Called by emacs-startup-hook to set up my initial window configuration."
    (org-agenda nil "0"))

  (global-set-key (kbd "H-1") #'yza/default-window-setup)
  (global-set-key (kbd "H-0") #'yza/switch-to-agenda)
#+END_SRC

** TODO Daemon
** TODO fortune?
(format
                                   ";; %s\n\n"
                                   (replace-regexp-in-string
                                    "\n" "\n;; " ; comment each line
                                    (replace-regexp-in-string
                                     "\n$" ""    ; remove trailing linebreak
                                     (shell-command-to-string "fortune wisdom"))))
** Recentf
#+BEGIN_SRC emacs-lisp
  (require 'recentf) ;; so that the recentfiles don't show the installed packages
  (recentf-mode 1)
  (add-to-list 'recentf-exclude "\\elpa")
#+END_SRC
** Remember cursor position
#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC

* Org-related tweaks
** Standard procedures
*** Custom functions
#+BEGIN_SRC emacs-lisp
  (defun yza/consult-org-headings-all ()
    (interactive)
    (consult-org-heading t 'agenda))
  (defun dfeich/helm-org-clock-in (marker)
    "Clock into the item at MARKER"
    (with-current-buffer (marker-buffer marker)
      (goto-char (marker-position marker))
      (org-clock-in)))
  (defun do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t))
#+END_SRC
*** Custom directory variables
#+BEGIN_SRC emacs-lisp
(defvar yza/agenda-files "~/Dropbox/org_new/life/actions")
(defvar yza/journal-files "~/Dropbox/org_new/life/journal")
(defvar yza/slipbox-files "~/Dropbox/org_new/notes/2.slipbox")
#+END_SRC

*** Org-mode use-package declaration
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))
    :bind (("H-/" . org-todo)
           ("H-." . yza/consult-org-headings-all)
           ("C-c 1" . org-time-stamp-inactive)
           ("H-i" . do-org-show-all-inline-images)
           ("<H-left>" . org-clock-in)
           ("<H-right>" . org-clock-out))
    :custom
    (org-extend-today-until 5)
    (org-log-into-drawer t)
    (org-latex-create-formula-image-program 'dvisvgm)
    (org-ellipsis "▾")
    (org-directory "~/Dropbox/org")
    (org-return-follows-link t)
    (org-use-fast-todo-selection t)
    (org-hide-emphasis-markers t)
    (org-toggle-pretty-entities t)
    (org-return-follows-link t)

    (org-todo-keywords
     '((sequence "TODO(t!)" "NEXT(n)" "WAIT(w)" "SOMEDAY(s@)" "GOAL(1)" "|" "CNCL(c@)" "DONE(d!)")
       (sequence "IDEA(i!)" "WORKING(k!)" "INCUBATE(y!)" "MATURE(m!)" "|" "REJECT(j@/@)")
       (sequence "BACKLOG(b)" "READING(a!)" "PROCESS(p!)" "|" "CONSUMED(p@)" "DROPPED(d@/@)")))

    (org-todo-keyword-faces
     (quote (("TODO" :foreground "OrangeRed" :weight bold)
             ("NEXT" :foreground "RoyalBlue1" :weight bold)
             ("SOMEDAY" :foreground "DarkOrange1" :weight bold)
             ("DONE" :foreground "MediumSpringGreen" :weight bold)
             ("WAIT" :foreground "yellow" :weight bold)
             ("CNCL" :foreground "SaddleBrown" :weight bold)

             ("IDEA" :foreground "White" :background "OrangeRed1" :weight bold)
             ("WORKING" :foreground "White" :background "OrangeRed4" :weight bold)
             ("INCUBATE" :foreground "White" :background "DodgerBlue4" :weight bold)
             ("MATURE" :foreground "White" :background "blue3" :weight bold)
             ("REJECT" :foreground "White" :background "DarkRed" :weight bold)

             ("BACKLOG" :foreground "PaleVioletRed" :weight bold)
             ("READING" :foreground "LightPink" :weight bold)
             ("PROCESS" :foreground "gold" :weight bold)
             ("CONSUMED" :foreground "MediumSpringGreen" :weight bold)
             ("DROPPED" :foreground "LightSlateGrey" :weight bold)

             ("GOAL" :foreground "DeepPink" :weight bold)
             )))

    :custom-face
    (org-document-title ((t (:weight bold :height 1.5))))
    (org-headline-done ((t (:strike-through t))))
    (org-image-actual-width '(600)))
#+END_SRC

*** Org-agenda custom views
#+BEGIN_SRC emacs-lisp
  (use-package org-ql)
  (use-package org-super-agenda
    :hook ((org-agenda-mode . org-super-agenda-mode)))

  (setq org-agenda-custom-commands
        '(("7" "Super-default"
           ((agenda "" ((org-agenda-span 'day) (org-agenda-files '("~/Dropbox/org/life/" "~/Dropbox/org/knowledge/projfiles" "~/Dropbox/org/journal/"))
                        (org-super-agenda-groups
                         '((:log t)
                           (:discard (:habit t))
                           (:scheduled t)
                           (:deadline t)
                           (:discard (:anything t))
                           ))
                        ))
            (alltodo "" ((org-agenda-overriding-header "Review Later Items") (org-agenda-files '("~/Dropbox/org/life/actionable.org"))
                         (org-super-agenda-groups
                          '((:discard (:not (:todo ("NEXT"))))
                            (:name "Must Today - clear this by schedding"
                                   :and (:priority ("A") :not (:scheduled t))
                                   :order 1)
                            (:name "Must Later"
                                   :and (:priority ("B") :not (:scheduled t))
                                   :order 2)
                            (:name "Should Today - clear this by schedding"
                                   :and (:priority ("C") :not (:scheduled t))
                                   :order 3)
                            (:name "Should Later"
                                   :and (:priority ("D") :not (:scheduled t))
                                   :order 4)
                            (:name "Coulds"
                                   :and (:priority ("E") :not (:scheduled t))
                                   :order 5)
                            ))))
            (alltodo "" ((org-agenda-overriding-header "Sort by Difficulty") (org-agenda-files '("~/Dropbox/org/life/actionable.org"))
                         (org-super-agenda-groups
                          '((:discard (:not (:todo ("NEXT" "WAIT"))))
                            (:name "Inbox!"
                                   :and (:not (:tag("low" "mid" "high" "chill") :scheduled t :effort> "0"))
                                   :order 1)
                            (:name "Keep in mind!"
                                   :deadline t
                                   :order 2)
                            (:name "Delegated, waiting"
                                   :todo "WAIT"
                                   :order 3)
                            (:name "Light Tasks!"
                                   :and (:tag ("low") :not (:scheduled t))
                                   :order 31)
                            (:name "Mid-tier!"
                                   :and (:tag ("mid") :not (:scheduled t))
                                   :order 32)
                            (:name "Hard Tasks"
                                   :and (:tag ("high") :not (:scheduled t))
                                   :order 41)
                            ))))
            (alltodo "" ((org-agenda-span 'day) (org-agenda-files '("~/Dropbox/org/life/actionable.org"))
                         (org-agenda-overriding-header "Parallelism!")
                         (org-super-agenda-groups
                          '((:name "Today"
                                   :and (:category "Action" :tag "chill" :scheduled today))
                            (:name "Others"
                                   :and (:category "Action" :tag "chill" :not (:scheduled t)))
                            (:discard (:anything t))
                            ))
                         ))
            (agenda "" ((org-agenda-span 'day) (org-agenda-files '("~/Dropbox/org/life/routines.org"))
                        (org-agenda-overriding-header "Routines!")
                        (org-super-agenda-groups
                         '((:discard (:not (:habit t)))
                           (:auto-parent t)
                           ))
                        ))
            (alltodo "" ((org-agenda-overriding-header "Project Masterlists")
                         (org-agenda-files '("~/Dropbox/org/life/actionable.org"))
                         (org-super-agenda-groups
                          '((:discard (:category ("Scheduled" "Action" "Delegated")))
                            (:auto-parent t)
                            ))
                         ))
            (alltodo "" ((org-agenda-overriding-header "Active Books/Resources") (org-agenda-files '("~/Dropbox/org/life/list.org"))
                         (org-super-agenda-groups
                          '((:discard (:not (:todo ("READING" "PROCESS"))))
                            (:tag "_dpanal")
                            (:auto-property "Genre")
                            ))
                         ))
            ))
          ("0" "Focus"
           ((agenda "" ((org-agenda-span 'day) (org-agenda-files '("~/Dropbox/org/life/" "~/Dropbox/org/knowledge/projfiles/" "~/Dropbox/org/journal/"))
                        (org-agenda-entry-types '(:scheduled :deadline :timestamp))
                        (org-super-agenda-groups
                         '((:discard (:log t))
                           (:discard (:tag "longrun"))
                           (:discard (:deadline future))
                           (:name "Nice!"
                                  :todo "DONE"
                                  :todo "CNCL")
                           (:name "Today"
                                  :tag "chill"
                                  :time-grid t
                                  :scheduled today
                                  :deadline today)
                           (:name "Past"
                                  :scheduled past)
                                          ;   :and (:not (:deadline today) :scheduled today))
                           (:discard (:anything t))
                           ))
                        ))
            (org-ql-block '(and (not (clocked :on 0)) (tags "longrun") (ts-active :to 0))
                          ((org-ql-block-header "Longruns!")))
            (agenda "" ((org-agenda-span 'day) (org-agenda-files '("~/Dropbox/org/life/" "~/Dropbox/org/knowledge/projfiles" "~/Dropbox/org/journal/"))
                        (org-agenda-overriding-header "Deadlines!")
                        (org-agenda-entry-types '(:deadline))
                        (org-super-agenda-groups
                         '((:discard (:not (:deadline future)))
                           (:name "" :deadline future)
                           ))
                        ))
            (agenda "" ((org-agenda-span 'day) (org-agenda-sorting-strategy '(time-up todo-state-up priority-down))))
            ))
          ("w" "Weekly Review"
           ((agenda "" ((org-agenda-start-day "-Mon")
                        (org-agenda-files '("~/Dropbox/org/life/" "~/Dropbox/org/knowledge/projfiles" "~/Dropbox/org/journal/"))
                        (org-agenda-span 14)
                        (org-agenda-start-on-weekday 1)
                        (org-super-agenda-groups
                         '((:discard (:not (:todo "DONE")))
                           (:name "" :log clocked)
                           (:discard (:anything t))
                           )))
                    )))
          ("9" "Schedule NEXT Tasks"
           ((agenda "" ((org-agenda-span 'day))) (todo "NEXT")))
          ("1" "Backlogged Articles / Movies!"
           ((alltodo "" ((org-agenda-overriding-header "Books") (org-agenda-files '("~/Dropbox/org/life/list.org"))
                         (org-super-agenda-groups
                          '((:discard (:not (:and (:category "books" :todo "BACKLOG"))))
                            (:auto-priority)
                            ))
                         ))
            (alltodo "" ((org-agenda-overriding-header "Web Resources") (org-agenda-files '("~/Dropbox/org/life/list.org"))
                         (org-super-agenda-groups
                          '((:discard (:not (:and (:category "webref" :todo "BACKLOG"))))
                            (:auto-priority)
                            ))
                         ))
            (alltodo "" ((org-agenda-overriding-header "Movies") (org-agenda-files '("~/Dropbox/org/life/list.org"))
                         (org-super-agenda-groups
                          '((:discard (:not (:and (:category "movies" :todo "BACKLOG"))))
                            (:auto-priority)
                            ))
                         ))
            ))
          ("2" "Research Papers"
           ((alltodo "" ((org-agenda-overriding-header "Currently Researching...") (org-agenda-files '("~/Dropbox/org/knowledge/slipbox"))
                         (org-super-agenda-groups
                          '((:discard (:scheduled t))
                            (:name "Ideas to be researched!"
                                   :todo "IDEA")
                            (:name "Currently drafting"
                                   :todo "WORKING")
                            (:name "Final Review!"
                                   :todo "INCUBATE")
                            (:name "Matured"
                                   :todo "MATURE")
                            (:name "To be revised"
                                   :todo "REJECT")
                            (:discard (:anything t))
                            ))))
            ))
          ))
#+END_SRC

*** Org-agenda use-package declaration
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :bind (("<f9>" . org-agenda))
    :ensure nil
    :custom
    (org-agenda-files '("~/Dropbox/org/life/" "~/Dropbox/org/knowledge/projfiles" "~/Dropbox/org/journal/"))
    (org-agenda-start-with-log-mode t)
    )
#+END_SRC

*** TODO Org-capture use-package
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :ensure nil
    :after org-gtd
    :bind (("<f12>" . org-capture))
    :config
    (setq org-capture-templates `(("s" "Speedy task! (skipping inbox)"
                                   entry (file+headline "~/Dropbox/org/life/actionable.org" "Actions")
                                   "* NEXT %? \n%U\n\n %i"
                                   :kill-buffer t)
                                  ("m" "Movie"
                                   entry (file+headline "~/Dropbox/org/life/list.org" "Movies")
                                   "* %? @watch %^{GIST}p %^{GENRE}p")
                                  ("e" "Book" entry (file+headline "~/Dropbox/org/life/list.org" "Books")
                                   "* BACKLOG %^{TITLE}\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n%^{AUTHOR}p%^{GIST}p%^{GENRE}p\n:END:%?" :empty-lines 1)
                                  )))
#+END_SRC

** Org tiny plug-ins
*** Org-fragtog and Org-reveal for revealing markups
Org-fragtog for viewing raw latex and svg generation
#+BEGIN_SRC emacs-lisp
  (use-package org-fragtog
    :hook ((org-mode . org-fragtog-mode)))
#+END_SRC

Org-appear for general org markups
#+BEGIN_SRC emacs-lisp
  (use-package org-appear
    :hook ((org-mode . org-appear-mode)))
#+END_SRC
*** Flyspell-correct for spelling
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+END_SRC
*** Olivetti for formatting
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :hook ((org-mode . olivetti-mode))
    :custom
    (olivetti-body-width 175))
#+END_SRC
*** Org-download
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :defer t
    :init
    ;; Add handlers for drag-and-drop when Org is loaded.
    (with-eval-after-load 'org
      (org-download-enable))
    :config
    (add-hook 'dired-mode-hook 'org-download-enable)
    (setq-default org-download-image-dir "~/Dropbox/org_back"))
#+END_SRC
*** Org-clock-convenience
#+BEGIN_SRC emacs-lisp
  (use-package org-clock-convenience
    :bind (:map org-agenda-mode-map
                ("<H-up>" . org-clock-convenience-timestamp-up)
                ("<H-down>" . org-clock-convenience-timestamp-down)
                ("<H-left>" . org-clock-convenience-fill-gap)
                ("<H-right>" . org-clock-convenience-fill-gap-both)))
#+END_SRC
*** TODO Org-projectile
** Complicated extensions
*** TODO vale for linting
[[https://emacstil.com/til/2022/03/05/setting-up-vale-prose-linter-on-emacs/][short tut]]

*** org-journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :defer t
    :hook (after-init . evil-mode)
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "H-j ")
    :config
    (setq org-journal-dir yza/journal-files
          org-journal-file-type 'weekly
          org-journal-file-header "#+STARTUP: folded\n"
          org-journal-date-format "%A, %d %B %Y"
          org-journal-file-format "%Y-%m-%d.org")
    )

#+END_SRC

* Yza Config - Third-party
** Evil: Expansion packs
*** TODO evil-org
*** SOMEDAY Alternative modal editing: meow
** Themes
*** Poet config
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))
  (add-to-list
   'default-frame-alist'(ns-transparent-titlebar . t))
  (add-to-list
   'default-frame-alist'(ns-appearance . light))
  (set-face-attribute 'default nil :family "Roboto Mono" :height 150)
  (set-face-attribute 'fixed-pitch nil :family "Roboto Mono")
  (set-face-attribute 'variable-pitch nil :family "IBM Plex Serif")
#+END_SRC
*** COMMENT Circadian for changing themes
#+BEGIN_SRC emacs-lisp
(use-package poet-theme :ensure :defer)
(use-package poet-dark :ensure :defer)

(use-package circadian
  :ensure t
  :config
  (setq calendar-latitude 14.6)
  (setq calendar-longitude 121.1)
  (setq circadian-themes '((:sunrise . poet-theme)
                           (:sunset  . poet-dark)))
  (circadian-setup))
#+END_SRC

** Mode line
for minimalist modeline
#+BEGIN_SRC emacs-lisp
  (use-package mood-line
    :config (mood-line-mode))
#+END_SRC

** Beacon for visible cursor
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config (beacon-mode 1))
#+END_SRC

** Better undo
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :config
    (global-unset-key (kbd "C-/"))
    (global-set-key (kbd "C-/")   'undo-fu-only-undo)
    (global-set-key (kbd "C-?") 'undo-fu-only-redo))
#+END_SRC

** COMMENT Using <SPC> for C-x
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "<SPC>") ctl-x-map)
#+END_SRC

** Completion stack
*** Vertico
The main interface for completion. Comparing both selectrum and this, I decided to go with this because it is more lightweight
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+END_SRC
**** Savehist (Built-in)
In-built package that remembers the commands and such picked in the mini-buffer and places it on the top.
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+END_SRC
**** Orderless (Third-party)
Completion style that allows spaces to be included in the narrowing. Can also match candidates regardless of order the user typed
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC
*** Marginalia
For hints in the completion (eg. commands bindings/meanings)
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+END_SRC

*** Consult
for other useful functions
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :preface
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-g r" . consult-recent-file)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history)                ;; orig. previous-matching-history-element
           ;; Custom shit
           )

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")
    )
#+END_SRC
**** TODO [#A] Consult Bibtex
**** TODO [#A]  have rg functions for agenda, projects, zettls
*** Embark
for flipping the usual action-item movement of M-x; allowing to first select the thing BEFORE finalizing the action to be used.
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :preface
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    (setq prefix-help-command #'embark-prefix-help-command)
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

**** COMMENT Embark as helm
Ported from [[https://karthinks.com/software/fifteen-ways-to-use-embark/][karthinks]]
#+BEGIN_SRC emacs-lisp
(defun with-minibuffer-keymap (keymap)
  (lambda (fn &rest args)
    (minibuffer-with-setup-hook
        (lambda ()
          (use-local-map
           (make-composed-keymap keymap (current-local-map))))
      (apply fn args))))

(defvar embark-completing-read-prompter-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<tab>") 'abort-recursive-edit)
    map))

(advice-add 'embark-completing-read-prompter :around
            (with-minibuffer-keymap embark-completing-read-prompter-map))
(define-key vertico-map (kbd "<tab>") 'embark-act-with-completing-read)

  (defun embark-act-with-completing-read (&optional arg)
    (interactive "P")
    (let* ((embark-prompter 'embark-completing-read-prompter)
           (act (propertize "Act" 'face 'highlight))
           (embark-indicator (lambda (_keymap targets) nil)))
      (embark-act arg)))
#+END_SRC
** Completion: Expansion packs
*** TODO consult-dir
using consult for directory completion everywhere!
*** TODO compose custom keymap for direct clocking?
** Yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 3 ;; takes a while to load, so do it async
    :config (yas-global-mode)
    ;; :custom (yas-prompt-functions '(yas-completing-prompt))
    )
#+END_SRC
** COMMENT Helpful for verbose help
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-c C-d" . helpful-at-point))
#+END_SRC

** TODO Avy
** TODO Ace-window for fast swaps
* Yza Config - Programming
** Showing diffs (git)
*** Diff-hl
** Aggressive indention
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config
    (global-aggressive-indent-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+END_SRC

** Yankpad
#+BEGIN_SRC emacs-lisp
  (use-package yankpad
    :defer 10
    :init
    (setq yankpad-file "~/Dropbox/org/yankpad.org")
    :config
    (bind-key "<H-backspace>" 'yankpad-expand))
#+END_SRC

** TODO [#A] Projectile
** TODO [#A] Company
** TODO Parrot?
** TODO Outshine to navigate code like org-mode?
** Language Specific
*** TODO [#B] LSP-mode for favorite programs
*** TODO Emmet mode for fast HTML/CSS

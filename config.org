#+Title: Yay-Evil distro by Ian Y.E. Pan
#+Author: Ian Y.E. Pan
#+Date: 2019

:: [[https://github.com/ianyepan/.macOS-emacs.d/blob/master/init.el][pan's short config]]

* Quelpa
#+begin_src emacs-lisp
  (require 'quelpa-use-package)
  (quelpa-use-package-activate-advice)
#+end_src

* scratch fortunes
#+begin_src emacs-lisp
  (setq fortune-file "~/Dropbox/org/meta/yza")
  (setq fortune-dir "~/Dropbox/org/meta/")
  (use-package scratch-message
    :quelpa (scratch-message :fetcher github :repo "thisirs/scratch-message")
    :config
    (add-hook 'after-init-hook 'scratch-message-mode)
    (setq scratch-message-function #'scratch-message-fortune))
#+end_src

* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source Code". The variable ~ian/indent-width~ controls the default indentation across various programming modes. The default is 4, you can change this variable to 2 or any other indentation width you prefer, and the change will be made across all programming language modes including C, C++, Java, Python etc. (Exception: JavaScript defaults to 2-space indent, you can still set it to any other indentation width you prefer in the ~web-mode~ section.)
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar ian/indent-width 4) ; change this value to your preferred width
    :config
    (setq ;; frame-title-format '("yzaa - ಠ_ಠ") ; Yayyyyy Evil!
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; > 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width ian/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t)

    ;; Vertico config
    ;; Enable commands in the minibuffer
    (setq enable-recursive-minibuffers t)

    ;; From the old config
    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq blink-cursor-mode nil)
    )


  ;; The Emacs default split doesn't seem too intuitive for most users.
  (use-package emacs
    :ensure nil
    :preface
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ian/split-and-follow-vertically))

  ;; (use-package "startup"
  ;;   :ensure nil
  ;;   :config
  ;;   (setq initial-scratch-message ""))
#+END_SRC

* Configuration for built-in packages
Since we're using use-package as our package management system, we might as well try to organize under the same syntax as much as possible to keep the configuration consistent. The option ~use-package-always-ensure~ is turned on in ~init.el~, so we'll add ~:ensure nil~ when configuring the built-in packages.
** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC

** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC

** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC

** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC

** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC

** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC

** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default)
to the more standard K&R. Here we also set the indentation width of C,
C++, Java, and Python to the preferred value defined in
~ian/indent-width~ (all languages default to 4, except JavaScript,
which is 2, as controlled in ~web-mode~). Of course, you can change
the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset ian/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; Python (both v2 and v3)
  (use-package python
    :ensure nil
    :config
    (setq python-indent-offset ian/indent-width)
    (setq python-guess-indent nil)
    )

#+END_SRC

** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC

** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC

** COMMENT Setting up some frame defaults
Maximize the frame by default on start-up. Set the font to size 12.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :preface
    (defun ian/set-default-font ()
      (interactive)
      (when (member "Consolas" (font-family-list))
        (set-face-attribute 'default nil :family "Consolas"))
      (set-face-attribute 'default nil
                          :height 150
                          :weight 'normal))
    :ensure nil
    :config
    (setq initial-frame-alist '((fullscreen . maximized)))
    (ian/set-default-font))
#+END_SRC

** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC

** COMMENT Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC

** COMMENT Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC

** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src

** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC

* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely
fine! However, one of the goals of the Yay-Evil distro is to provide
an essential-only foundation for users to build upon. Therefore, only
the most important packages and/or lightweight improvements will be
included here. For example, completion frameworks like Ivy or Helm are
considered heavy by many, yet the built-in Ido serves almost the same
purpose. The only arguably opinionated package is probably Evil, but
you probably saw that coming from the distro name, didn't you ;) ? If
you prefer the default keybindings, simply disable the section that
controls the Evil behaviors.

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Load custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
  (load-theme 'poet-dark t)
#+END_SRC

*** COMMENT Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 3
          dashboard-banner-logo-title "PKM v3!"
          dashboard-items nil))
#+END_SRC

**** Dashboard custom quotes
Stolen from this [[https://www.reddit.com/r/emacs/comments/kkujqe/emacs_dashboard_configuration/][reddit guy]]
#+BEGIN_SRC emacs-lisp
  ;; Read file as list of lines
   ;; http://ergoemacs.org/emacs/elisp_read_file_content.html
   (defun read-lines (filePath)
     "Return a list of lines of a file at filePath."
     (with-temp-buffer
       (insert-file-contents filePath)
       (split-string (buffer-string) "\n" t)))
   ;; Use file as random footer message
   ;; Created with quotes.org roam file
   (setq dashboard-footer-messages (read-lines "~/.emacs.d/external/dashboard-quotes.txt"))
#+END_SRC

*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC

** Vi keybindings
I personally find Vi(m) bindings to be the most efficient way of
editing text (especially code). I also changed the default ~:q~ and
~:wq~ to be killing current buffer, instead of killing the frame or
subsequently killing Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-shift-width ian/indent-width)
    :hook (after-init . evil-mode)
    :preface
    (defun ian/save-and-kill-this-buffer ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    :config
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil))
    (evil-ex-define-cmd "q" #'kill-this-buffer)
    (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer)
    )
#+END_SRC
Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC
Emulates tpope's vim commentary package (Use ~gcc~ to comment out a line,
~gc~ to comment out the target of a motion (for example, ~gcap~ to
comment out a paragraph), ~gc~ in visual mode to comment out the
selection etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC

** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+END_SRC

** Searching/sorting enhancements & project management
*** CANC Ido, ido-vertical, ido-ubiquitous and fuzzy matching
Selecting buffers/files with great efficiency. In my opinion, Ido is
enough to replace Ivy/Counsel and Helm. We install ido-vertical to get
a better view of the available options (use ~C-n~, ~C-p~ or arrow keys
to navigate)
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode +1)
    (setq flycheck-global-modes '(not org-mode)))
#+END_SRC

*** COMMENT Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode)))

  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Useful major modes
Markdown mode and Web mode, the latter covers our usages of HTML/CSS/JS/JSX/TS/TSX/JSON.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC

** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword we've been using in
other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC

*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC

*** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)
              (setq exec-path-from-shell-arguments nil)))

#+END_SRC

* Yza Config - Built-in
** use-package / requires declarations
*** org-mode
:PROPERTIES:
:ID:       20220920T223607.756827
:END:
:RELATED:
[2022-09-20 Tue 22:36] -> [[id:20220920T223607.808228][Org ID, Org Attach & Better Folder Names · The Art of Not Asking Why]]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin gnu
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))
    :config
    (define-key org-mode-map (kbd "C-c C-l") nil)
    (setq org-catch-invisible-edits 'error)
    (setq org-image-actual-width '(600))
    (setq org-latex-listings t)
    :bind (("H-/" . org-todo)
           ("C-c l" . org-store-link)
           ("C-c C-l" . ar/org-insert-link-dwim)
           ("H-l o" . org-id-get-create)
           ("H-l l" . org-id-store-link)
           ("H-l p" . org-insert-last-stored-link)
           ("C-c 1" . org-time-stamp-inactive)
           ("H-i" . do-org-show-all-inline-images)
           ("C-c o" . org-edit-src-code)
           ("<H-left>" . org-clock-in)
           ("<H-right>" . org-clock-out))
    :custom
    (org-id-method 'ts)
    (org-attach-id-to-path-function-list
     '(org-attach-id-ts-folder-format
       org-attach-id-uuid-folder-format))
    (org-log-done 'time)
    ;; (org-id-extra-files (append (find-lisp-find-files yza/action-archives "\.org$") (find-lisp-find-files yza/meta-files "\.org$")))
    ;; (org-id-extra-files (append (find-lisp-find-files yza/action-archives "\.org_archive$")))
    (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
    (org-extend-today-until 5)
    (org-log-into-drawer t)
    (org-latex-create-formula-image-program 'dvisvgm)
    (org-ellipsis " ▾")
    (org-directory "~/Dropbox/org/")
    (org-use-sub-superscripts '{})
    (org-return-follows-link t)
    (org-log-reschedule 'note)
    (org-use-fast-todo-selection t)
    (org-hide-emphasis-markers t)
    (org-toggle-pretty-entities t)
    (org-priority-default 71)
    (org-priority-lowest 71)
    (org-priority-faces (quote ((65 . "pink1") (66 . "SlateGray1") (67 . "OrangeRed") (68 . "DarkOrange1") (69 . "DarkTurquoise") (70 . "SkyBlue1") (71 . "khaki3"))))
    (org-columns-default-format "%ITEM(Task) %TODO %Effort(Estimated){:} %3PRIORITY %TAGS")

    (org-modules '(org-habit))
    (org-habit-graph-column 80)

    (org-todo-keywords
     '((sequence "INTR(i)" "TODO(t)" "NEXT(n!)" "PROG(p!)" "FRZE(f@)" "|" "CNCL(c@)" "DONE(d!)")
       (sequence "BACKLOG(1!)" "WIP(2!)" "INCUBATE(3!)" "MATURE(4!)" "|" "REJECT(5@/@)")
       ))

    (org-todo-keyword-faces
     (quote (("TODO" :foreground "OrangeRed" :weight bold )
             ("INTR" :foreground "DeepPink1" :weight bold)
             ("NEXT" :foreground "RoyalBlue1" :weight bold)
             ("PROG" :foreground "yellow" :weight bold)
             ("DONE" :foreground "MediumSpringGreen" :weight bold)
             ("CNCL" :foreground "SaddleBrown" :weight bold)

             ("BACKLOG" :foreground "White" :background "OrangeRed1" :weight bold)
             ("WIP" :foreground "White" :background "OrangeRed4" :weight bold)
             ("INCUBATE" :foreground "White" :background "DodgerBlue4" :weight bold)
             ("MATURE" :foreground "White" :background "blue3" :weight bold)
             ("REJECT" :foreground "White" :background "DarkRed" :weight bold)

                 ;;;; Special TODOs (can be used everywhere, especially FRZE)
             ("FRZE" :foreground "turquoise" :weight bold :box t)
             )))
    :custom-face
    (org-link ((t (:inherit link :family "Roboto Mono"))))
    (org-document-title ((t (:weight bold :height 1.5))))
    (org-headline-done ((t (:strike-through t))))
    (org-drawer ((t (:inherit link :family "Roboto Mono"))))
    (org-drawer ((t (:inherit (shadow fixed-pitch) :foreground "DimGray"))))
    )
#+END_SRC

*** Alerts
#+BEGIN_SRC emacs-lisp
  (use-package alert
    :ensure nil
    :config
    (if (eq system-type 'darwin)
        (setq
         alert-default-style 'osx-notifier
         )))
#+END_SRC

*** Recentf
#+BEGIN_SRC emacs-lisp
  (require 'recentf) ;; so that the recentfiles don't show the installed packages
  (recentf-mode 1)
  (add-to-list 'recentf-exclude "\\elpa")
#+END_SRC

*** Buffer travel using windmove
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings 'super)
  (winner-mode 1)
#+END_SRC

*** TODO dynamic abbrevs / hippie expand
[[https://www.emacswiki.org/emacs/DynamicAbbreviations][emacswiki]]

*** zoning
#+begin_src emacs-lisp
  (setq zone-timer (run-with-idle-timer 120 t 'zone))
  (global-set-key (kbd "C-c z a") 'zone-when-idle)
  (global-set-key (kbd "C-c z x") 'zone-leave-me-alone)
  (global-set-key (kbd "C-c z i") 'zone)
#+end_src

** functions, main functionalities
*** Replace default org-cycle to include properties too
Credit to lawliet from stackoverflow [[https://stackoverflow.com/a/17492723][[link]​]]
#+BEGIN_SRC emacs-lisp
  (defun org-cycle-hide-drawers (state)
    "Re-hide all drawers after a visibility state change."
    (when (and (derived-mode-p 'org-mode)
               (not (memq state '(overview folded contents))))
      (save-excursion
        (let* ((globalp (memq state '(contents all)))
               (beg (if globalp
                        (point-min)
                      (point)))
               (end (if globalp
                        (point-max)
                      (if (eq state 'children)
                          (save-excursion
                            (outline-next-heading)
                            (point))
                        (org-end-of-subtree t)))))
          (goto-char beg)
          (while (re-search-forward org-drawer-regexp end t)
            (save-excursion
              (beginning-of-line 1)
              (when (looking-at org-drawer-regexp)
                (let* ((start (1- (match-beginning 0)))
                       (limit
                        (save-excursion
                          (outline-next-heading)
                          (point)))
                       (msg (format
                             (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                             (1+ start))))
                  (if (re-search-forward "^[ \t]*:END:" limit t)
                      (outline-flag-region start (point-at-eol) t)
                    (user-error msg))))))))))



  (defun org-cycle-internal-local ()
    "Do the local cycling action."
    (let ((goal-column 0) eoh eol eos has-children children-skipped struct)
      ;; First, determine end of headline (EOH), end of subtree or item
      ;; (EOS), and if item or heading has children (HAS-CHILDREN).
      (save-excursion
        (if (org-at-item-p)
            (progn
              (beginning-of-line)
              (setq struct (org-list-struct))
              (setq eoh (point-at-eol))
              (setq eos (org-list-get-item-end-before-blank (point) struct))
              (setq has-children (org-list-has-child-p (point) struct)))
          (org-back-to-heading)
          (setq eoh (save-excursion (outline-end-of-heading) (point)))
          (setq eos (save-excursion
                      (org-end-of-subtree t t)
                      (unless (eobp) (forward-char -1))
                      (point)))
          (setq has-children
                (or
                 (save-excursion
                   (let ((level (funcall outline-level)))
                     (outline-next-heading)
                     (and (org-at-heading-p t)
                          (> (funcall outline-level) level))))
                 (and (eq org-cycle-include-plain-lists 'integrate)
                      (save-excursion
                        (org-list-search-forward (org-item-beginning-re) eos t))))))
        ;; Determine end invisible part of buffer (EOL)
        (beginning-of-line 2)
        (while (and (not (eobp))		;this is like `next-line'
                    (get-char-property (1- (point)) 'invisible))
          (goto-char (next-single-char-property-change (point) 'invisible))
          (and (eolp) (beginning-of-line 2)))
        (setq eol (point)))
      ;; Find out what to do next and set `this-command'
      (cond
       ((= eos eoh)
        ;; Nothing is hidden behind this heading
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'empty))
        (org-unlogged-message "EMPTY ENTRY")
        (setq org-cycle-subtree-status nil)
        (save-excursion
          (goto-char eos)
          (outline-next-heading)
          (when (org-invisible-p) (org-flag-heading nil))))
       ((and (or (>= eol eos)
                 (not (string-match "\\S-" (buffer-substring eol eos))))
             (or has-children
                 (not (setq children-skipped
                            org-cycle-skip-children-state-if-no-children))))
        ;; Entire subtree is hidden in one line: children view
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'children))
        (if (org-at-item-p)
            (org-list-set-item-visibility (point-at-bol) struct 'children)
          (org-show-entry)
          (org-with-limited-levels (org-show-children))
          (org-show-set-visibility 'tree)
          ;; Fold every list in subtree to top-level items.
          (when (eq org-cycle-include-plain-lists 'integrate)
            (save-excursion
              (org-back-to-heading)
              (while (org-list-search-forward (org-item-beginning-re) eos t)
                (beginning-of-line 1)
                (let* ((struct (org-list-struct))
                       (prevs (org-list-prevs-alist struct))
                       (end (org-list-get-bottom-point struct)))
                  (dolist (e (org-list-get-all-items (point) struct prevs))
                    (org-list-set-item-visibility e struct 'folded))
                  (goto-char (if (< end eos) end eos)))))))
        (org-unlogged-message "CHILDREN")
        (save-excursion
          (goto-char eos)
          (outline-next-heading)
          (when (org-invisible-p) (org-flag-heading nil)))
        (setq org-cycle-subtree-status 'children)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-cycle-hook 'children)))

       ;; transplant
       ((eq org-cycle-subtree-status 'subtree)
        (org-show-subtree)
        (org-unlogged-message "ALL")
        (setq org-cycle-subtree-status 'all))

       ((or children-skipped
            (and (eq last-command this-command)
                 (eq org-cycle-subtree-status 'children)))
        ;; We just showed the children, or no children are there,
        ;; now show everything.
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-pre-cycle-hook 'subtree))
        (org-flag-region eoh eos nil 'outline)
        (org-unlogged-message
         (if children-skipped "SUBTREE (NO CHILDREN)" "SUBTREE"))
        (setq org-cycle-subtree-status 'subtree)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-cycle-hook 'subtree)))

       (t
        ;; Default action: hide the subtree.
        (run-hook-with-args 'org-pre-cycle-hook 'folded)
        (org-flag-region eoh eos t 'outline)
        (org-unlogged-message "FOLDED")
        (setq org-cycle-subtree-status 'folded)
        (unless (org-before-first-heading-p)
          (run-hook-with-args 'org-cycle-hook 'folded))))))
#+END_SRC
*** Switch to scratch
#+BEGIN_SRC emacs-lisp
  (defun switch-to-scratch-buffer ()
    "Switch to the current session's scratch buffer."
    (interactive)
    (switch-to-buffer "*scratch*"))
  (bind-key "H-9" #'switch-to-scratch-buffer)
#+END_SRC

*** Put the cursor on the middle always
got it from this [[https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs.html][blog]]

#+BEGIN_SRC emacs-lisp
  (setq scroll-preserve-screen-position t
        scroll-conservatively 0
        maximum-scroll-margin 0.5
        scroll-margin 99999)
#+END_SRC

*** global relative line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)
#+end_src

*** Generate orgmode buffer quickly
Emacs: New Empty Buffer 🚀
http://xahlee.info/emacs/emacs/emacs_new_empty_buffer.html

#+begin_src
  (defun xah-new-empty-buffer ()          ;
    "Open a new empty buffer."
    (interactive)
    (let (($buf (generate-new-buffer "noname")))
      (switch-to-buffer $buf)
      (funcall (org-mode))
      (put 'buffer-offer-save 'permanent-local t)
      (setq buffer-offer-save t)
      $buf
      ))
#+end_src

How to create a new, unnamed file in emacs? - Stack Overflow
https://stackoverflow.com/questions/26979052/how-to-create-a-new-unnamed-file-in-emacs/26988416#26988416

#+begin_src emacs-lisp
  (defun new-empty-buffer ()
    "Opens a new empty buffer."
    (interactive)
    (switch-to-buffer (generate-new-buffer "untitled"))
    (funcall (org-mode))
    (put 'buffer-offer-save 'permanent-local t)
    (setq buffer-offer-save t))

  (global-set-key (kbd "<f8>") 'new-empty-buffer)
#+end_src

*** Ask to save if buffer is unlinked to file and modified
elisp - Emacs - Can't get buffer-offer-save working - Stack Overflow
https://stackoverflow.com/questions/2357881/emacs-cant-get-buffer-offer-save-working
#+begin_src elisp
  (defadvice kill-buffer (around kill-buffer-ask activate)
    "If `buffer-offer-save' is non-nil and a buffer is modified,
  prompt before closing."
    (if (and buffer-offer-save (buffer-modified-p))
        (when (yes-or-no-p "The document isn't saved. Quit? ")
          ad-do-it)
      ad-do-it))
#+end_src

*** Switch to sticky.org
#+BEGIN_SRC emacs-lisp
  (defun switch-to-sticky ()
    "Switch to my sticky.org"
    (interactive)
    (find-file "~/Dropbox/org/meta/sticky.org"))
  (bind-key "H-," #'switch-to-sticky)
#+END_SRC

*** Window configurations
#+BEGIN_SRC emacs-lisp
  (defun yza/default-window-setup ()
    "Called by emacs-startup-hook to set up my initial window configuration."
    ;; (find-file "~/Dropbox/org/meta/sticky.org")
    (ian/split-and-follow-vertically)
    (org-agenda nil "n"))

  (defun yza/default-fast-window-setup ()
    "Called by emacs-startup-hook to set up my initial window configuration."
    (split-window-below)
    (split-window-right))

  (defun yza/switch-to-agenda () ;; call org agenda only if there's no existing shit, use switch-buffer if so
    (interactive)
    "Called by emacs-startup-hook to set up my initial window configuration."
    (switch-to-buffer "*Org Agenda*")
    ;; (org-agenda nil "0")
    )

  (add-hook 'after-init-hook #'yza/default-window-setup)
  ;; (global-set-key (kbd "H-1") #'yza/default-window-setup)
  (global-set-key (kbd "H-0") #'yza/switch-to-agenda)
#+END_SRC

** modifying variables / keybinds
*** Custom file variables
#+begin_src emacs-lisp
  (defvar yza/web-bookmark-file "~/Dropbox/org/notes/bookmarks.org")
  (defvar yza/web-history-file "~/Dropbox/org/life/journal/webhistory.org")
#+end_src

*** Custom directory variables
#+BEGIN_SRC emacs-lisp
  (defvar yza/agenda-files "~/Dropbox/org/life/")

  (defvar yza/action-files "~/Dropbox/org/life/actions/")
  (defvar yza/review-files "~/Dropbox/org/life/reviews/")
  (defvar yza/journal-files "~/Dropbox/org/journal/")
  (defvar yza/progress-diary-files "~/Dropbox/org/life/progdiary/")
  ;; (defvar yza/special-journal-files "~/Dropbox/org/life/journal/0special/")

  (defvar yza/action-archives "~/Dropbox/org/life/__archive/")
  (defvar yza/allnotes-archive "~/Dropbox/org/notes/__archive/")

  (defvar yza/meta-files "~/Dropbox/org/meta/")
  (defvar yza/active-notes "~/Dropbox/org/notes/")
  (defvar yza/slipbox-files "~/Dropbox/org/notes/_slipbox/")
  (defvar yza/notepad-files "~/Dropbox/org/notes/_piles/")

  ;; Active Directories
  ;; (defvar yza/school-notes "~/Dropbox/org/notes/school/")
  ;; (defvar yza/writeups "~/Dropbox/org/notes/writeups/")
  (defvar yza/fics "~/Dropbox/org/imported/UL_fics")
#+END_SRC

*** Binding return to include indent
[[http://www.emacslife.com/read-lisp-tweak-emacs/beginner-3-make-things-more-convenient.html][newbie res here]]
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

*** Modifiers for mac
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (setq mac-command-modifier 'super
          mac-option-modifier 'meta
          mac-control-modifier 'control
          mac-function-modifier 'hyper))
#+END_SRC

*** open links via firefox
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+END_SRC

*** Remember cursor position
#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC

*** GPG config
#+begin_src emacs-lisp
  (setq epg-gpg-home-directory "~/.gnupg")
#+end_src

* Yza Config - Third-party
** Daemon Server
#+BEGIN_SRC emacs-lisp
  (use-package server
    :ensure nil
    :config
    (unless (server-running-p) (server-start)))

  ;; (use-package mac-pseudo-daemon
  ;;   :quelpa (mac-pseudo-daemon :fetcher github :repo "DarwinAwardWinner/mac-pseudo-daemon")
  ;;   :custom (mac-pseudo-daemon-mode t))
 #+END_SRC

** Evil: Expansion packs
*** evil leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :load-path "~/.emacs.d/external/evil-leader-master"
    :init
    (setq evil-want-keybindings nil)
    :config
    (evil-leader/set-leader "SPC")
    (evil-leader/set-key
      "l" 'next-buffer
      "h" 'previous-buffer
      "f" 'find-file
      "b" 'consult-buffer
      "K" 'kill-buffer
      "k" 'kill-this-buffer
      "g" 'minibuffer-keyboard-quit
      "s" 'consult-line
      "mg" 'consult-global-mark
      "mf" 'consult-mark
      "mj" 'org-mark-ring-goto
      "mh" 'org-mark-ring-push
      "0" 'delete-window
      "1" 'ian/split-and-follow-vertically
      "2" 'ian/split-and-follow-horizontally
      "<return>" 'org-open-at-point)
    (global-evil-leader-mode)
    )
#+END_SRC

*** change key to normal state
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "s-j") 'evil-force-normal-state)
#+END_SRC

*** TODO evil-org
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

*** SOMEDAY Alternative modal editing: meow

** Themes
*** Poet config
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))
  (add-to-list
   'default-frame-alist'(ns-transparent-titlebar . t))
  (add-to-list
   'default-frame-alist'(ns-appearance . light))
  (set-face-attribute 'default nil :family "Roboto Mono" :height 150)
  (set-face-attribute 'fixed-pitch nil :family "Roboto Mono")
  (set-face-attribute 'variable-pitch nil :family "IBM Plex Serif" :height 1.2)
#+END_SRC

#+begin_src emacs-lisp
  ;; (custom-theme-set-faces 'user
  ;;                         `(org-level-1 ((t (:foreground "#ffd2d2"))))
  ;;                         `(org-level-2 ((t (:foreground "#cbe2ff"))))
  ;;                         `(org-level-3 ((t (:foreground "#fffec8"))))
  ;;                         `(org-level-4 ((t (:foreground "#f7d4ff"))))
  ;;                         `(org-level-5 ((t (:foreground "#d9d9d9"))))
  ;;                         `(org-level-6 ((t (:foreground "#D2FFD2"))))
  ;;                         `(org-level-7 ((t (:foreground "#d2d2ff"))))
  ;;                         `(org-level-8 ((t (:foreground "#f9f0ff")))))
  (custom-set-faces
   `(org-level-1 ((t (:foreground "#ffd2d2" :height 1.4))))
   `(org-level-2 ((t (:foreground "#cbe2ff" :height 1.3))))
   `(org-level-3 ((t (:foreground "#fffec8" :height 1.3))))
   `(org-level-4 ((t (:foreground "#f7d4ff" :height 1.3))))
   `(org-level-5 ((t (:foreground "#d9d9d9" :height 1.3))))
   `(org-level-6 ((t (:foreground "#D2FFD2" :height 1.3))))
   `(org-level-7 ((t (:foreground "#d2d2ff" :height 1.3))))
   `(org-level-8 ((t (:foreground "#f9f0ff" :height 1.3)))))

  ;; (advice-add 'poet-theme--height :around (lambda (orig-fun multiplier)
  ;;                                           (face-attribute 'default :height 1.7)))
  ;; (org-document-title ((t (:weight bold :height 1.5))))
#+end_src
*** COMMENT Circadian for changing themes
#+BEGIN_SRC emacs-lisp
(use-package poet-theme :ensure :defer)
(use-package poet-dark :ensure :defer)
(use-package circadian
  :ensure t
  :config
  (setq calendar-latitude 14.6)
  (setq calendar-longitude 121.1)
  (setq circadian-themes '((:sunrise . poet-theme)
                           (:sunset  . poet-dark)))
  (circadian-setup))
#+END_SRC

** Big plug-ins
*** Hydra
most of this came from the official docs (all except org-roam)
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
  (use-package pretty-hydra)
#+END_SRC

**** COMMENT default - window movement
#+BEGIN_SRC emacs-lisp
   (defhydra hydra-window ()
     "
  Movement^^        ^Split^         ^Switch^		^Resize^
  ----------------------------------------------------------------
  _h_ ←         _v_ertical      _b_uffer		_q_ X←
  _j_ ↓         _x_ horizontal	_f_ind files	_w_ X↓
  _k_ ↑         _z_ undo        _a_ce 1		_e_ X↑
  _l_ →         _Z_ reset       _s_wap		_r_ X→
  _F_ollow		_D_lt Other     _S_ave		max_i_mize
  _SPC_ cancel	_o_nly this     _d_elete
  "
     ("h" windmove-left )
     ("j" windmove-down )
     ("k" windmove-up )
     ("l" windmove-right )
     ("q" hydra-move-splitter-left)
     ("w" hydra-move-splitter-down)
     ("e" hydra-move-splitter-up)
     ("r" hydra-move-splitter-right)
     ("b" helm-mini)
     ("f" ido-find-files)
     ("F" follow-mode)
     ("a" (lambda ()
            (interactive)
            (ace-window 1)
            (add-hook 'ace-window-end-once-hook
                      'hydra-window/body))
         )
     ("v" (lambda ()
            (interactive)
            (split-window-right)
            (windmove-right))
         )
     ("x" (lambda ()
            (interactive)
            (split-window-below)
            (windmove-down))
         )
     ("s" (lambda ()
            (interactive)
            (ace-window 4)
            (add-hook 'ace-window-end-once-hook
                      'hydra-window/body)))
     ("S" save-buffer)
     ("d" delete-window)
     ("D" (lambda ()
            (interactive)
            (ace-window 16)
            (add-hook 'ace-window-end-once-hook
                      'hydra-window/body))
         )
     ("o" delete-other-windows)
     ("i" ace-maximize-window)
     ("z" (progn
            (winner-undo)
            (setq this-command 'winner-undo))
     )
     ("Z" winner-redo)
     ("SPC" nil)
     )

  (global-set-key (kbd "s-q") 'hydra-window/body)
#+END_SRC

**** oft-used keys with no modifiers
#+BEGIN_SRC emacs-lisp
  (defun x-hydra-pre ()
    (insert "x")
    (let ((timer (timer-create)))
      (timer-set-time timer (timer-relative-time (current-time) 0.5))
      (timer-set-function timer 'hydra-keyboard-quit)
      (timer-activate timer)))

  (defhydra x-hydra (:body-pre x-hydra-pre
                               :color blue
                               :hint nil)
    ("f" (progn (zap-to-char -1 ?x) (ido-find-file)))
    ("g" (progn (zap-to-char -1 ?x) (minibuffer-keyboard-quit)))
    ("b" (progn (zap-to-char -1 ?x) (consult-buffer)))
    ("s" (progn (zap-to-char -1 ?x) (consult-line))))

  (global-set-key "x" #'x-hydra/body)
#+END_SRC

**** zooming
[[https://ericjmritz.wordpress.com/2015/10/14/some-personal-hydras-for-gnu-emacs/][source]]
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define phydra-zoom
    (:color pink :quit-key "SPC")
    ("Zoom"
     (("=" text-scale-increase "in")
      ("-" text-scale-decrease "out")
      ("0" (text-scale-adjust 0) "reset")
      )))

  (global-set-key (kbd "s-=") 'phydra-zoom/body)
#+END_SRC

**** TODO outline minor mode
#+BEGIN_SRC emacs-lisp
  (pretty-hydra-define phydra-outline
    (:color pink :quit-key "SPC" :title "Outline")
    ("Hide..."
     (("q" hide-sublevels "sublevels")
      ("t" hide-body "body")
      ("o" hide-other "other")
      ("c" hide-entry "entry")
      ("l" hide-leaves "leaves")
      ("d" hide-subtree "subtree")
      )
     "Show..."
     (("a" show-all "all")
      ("e" show-entry "entry")
      ("i" show-children "children")
      ("k" show-branches "branches")
      ("s" show-subtree "subtree")
      )
     "Move..."
     (("u" outline-up-heading "up")
      ("j" outline-next-visible-heading "next visible")
      ("k" outline-previous-visible-heading "prev visible")
      ("l" outline-forward-same-level "forward same level")
      ("h" outline-backward-same-level "backward same level")
      )
     )
    )

  (global-set-key (kbd "s-z") 'phydra-outline/body)
#+END_SRC

**** TODO default - ediff
#+BEGIN_SRC emacs-lisp
(defhydra hydra-ediff (:color blue :hint nil)
  "
^Buffers           Files           VC                     Ediff regions
----------------------------------------------------------------------
_b_uffers           _f_iles (_=_)       _r_evisions              _l_inewise
_B_uffers (3-way)   _F_iles (3-way)                          _w_ordwise
                  _c_urrent file
"
  ("b" ediff-buffers)
  ("B" ediff-buffers3)
  ("=" ediff-files)
  ("f" ediff-files)
  ("F" ediff-files3)
  ("c" ediff-current-file)
  ("r" ediff-revision)
  ("l" ediff-regions-linewise)
  ("w" ediff-regions-wordwise))
  (global-set-key (kbd "s-e") 'hydra-ediff/body)
#+END_SRC

**** TODO page navigation
#+BEGIN_SRC emacs-lisp
(defhydra hydra-page (ctl-x-map "" :pre (widen))
  "page"
  ("]" forward-page "next")
  ("[" backward-page "prev")
  ("n" narrow-to-page "narrow" :bind nil :exit t))
#+END_SRC

**** TODO code folding
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-hs (:idle 1.0)
     "
  Hide^^            ^Show^            ^Toggle^    ^Navigation^
  ----------------------------------------------------------------
  _h_ hide all      _s_ show all      _t_oggle    _n_ext line
  _d_ hide block    _a_ show block              _p_revious line
  _l_ hide level

  _SPC_ cancel
  "
     ("s" hs-show-all)
     ("h" hs-hide-all)
     ("a" hs-show-block)
     ("d" hs-hide-block)
     ("t" hs-toggle-hiding)
     ("l" hs-hide-level)
     ("n" forward-line)
     ("p" (forward-line -1))
     ("SPC" nil)
  )

  (global-set-key (kbd "s-w") 'hydra-hs/body)
#+END_SRC

**** yza - window movement
#+begin_src emacs-lisp
    (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))

    (pretty-hydra-define phydra-window
      (:color pink :quit-key "SPC" :title "Buffer Config")
      ("Navigate Buffers"
       (("h" windmove-left)
        ("j" windmove-down)
        ("k" windmove-up)
        ("l" windmove-right))

       "Add/Delete Window"
       (("2" split-window-below)
        ("3" split-window-right)
        ("4" ian/split-and-follow-vertically)
        ("5" ian/split-and-follow-horizontally)
        ("0" delete-window)
        ("-" delete-other-windows))

       "Resize Window"
       (("<backspace>" balance-windows)
        ("=" maximize-window)
        ("-" minimize-window))

       "Buffer Move"
       (("M-<up>" buf-move-up)
        ("M-<down>" buf-move-down)
        ("M-<left>" buf-move-left)
        ("M-<right>" buf-move-right))

       "Buffer History"
       (("<right>" previous-buffer)
        ("<left>" next-buffer))

       "Move Splitter Line"
       (("s-<up>" hydra-move-splitter-up)
        ("s-<down>" hydra-move-splitter-down)
        ("s-<left>" hydra-move-splitter-left)
        ("s-<right>" hydra-move-splitter-right))
       )
      )

    (global-set-key (kbd "s-w") 'phydra-window/body)
#+END_SRC
#+end_src
**** TODO yza - editing sentences and such
*** Avy
#+begin_src emacs-lisp
  (use-package avy
    :bind (("H-'" . avy-goto-char-timer))
    :config
    (defun avy-action-teleport-whole-line (pt)
      (avy-action-kill-whole-line pt)
      (save-excursion (yank)) t)
    (setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
          (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)

    (defun avy-action-flyspell (pt)
      (avy-generic-command-action #'flyspell-auto-correct-word))
    (setf (alist-get ?\C-. avy-dispatch-alist) 'avy-action-flyspell)

    (defun avy-action-mark-to-char (pt)
      (activate-mark)
      (goto-char (+ 1 pt)))
    (setf (alist-get 67108896 avy-dispatch-alist) 'avy-action-mark-to-char) ; C-SPC

    (defun avy-action-embark (pt)
      (unwind-protect
          (save-excursion
            (goto-char pt)
            (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
    )
#+end_src

*** Latex-related
#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("sch-assign" "\\documentclass{fphw}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
                 '("tufte-handout" "\\documentclass{tufte-handout}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
                 '("tufte-book" "\\documentclass{tufte-book}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** Small plug-ins
*** Hammerspoon
#+BEGIN_SRC emacs-lisp
(load "~/emacs/hammerspoon.el")
#+END_SRC

*** Buffer move
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :load-path "~/.emacs.d/external/buffer-move-master"
    )
#+END_SRC

*** Mode line
for minimalist modeline
#+BEGIN_SRC emacs-lisp
  (use-package mood-line
    :config (mood-line-mode))
#+END_SRC

*** COMMENT Beacon for visible cursor
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config (beacon-mode 1))
#+END_SRC

*** Better undo
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :config
    (global-unset-key (kbd "C-/"))
    (global-set-key (kbd "C-/")   'undo-fu-only-undo)
    (global-set-key (kbd "C-?") 'undo-fu-only-redo))
#+END_SRC

*** Yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 3 ;; takes a while to load, so do it async
    :config (yas-global-mode)
    ;; :custom (yas-prompt-functions '(yas-completing-prompt))
    )
#+END_SRC

*** link-hinting
#+begin_src emacs-lisp
  (use-package link-hint
    :ensure t
    :bind
    ("s-l o" . link-hint-open-link)
    ("s-l c" . link-hint-copy-link))
#+end_src

*** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("s-z" . er/expand-region))
#+end_src

*** nov.el
#+begin_src emacs-lisp
  (defun my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "IBM Plex Serif"
                             :height 1.4))
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    (add-hook 'nov-mode-hook 'my-nov-font-setup)
    (add-hook 'nov-mode-hook 'olivetti-mode))
#+end_src

*** org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :after (:any org pdfview)
    :config
    (setq
     org-noter-always-create-frame nil ;; Please stop opening frames
     org-noter-hide-other nil ;; I want to see the whole file
     ))
#+end_src

*** pdf-tools
#+begin_src emacs-lisp
  (add-hook 'doc-view-mode-hook 'pdf-tools-install)
#+end_src

*** autosave
#+begin_src emacs-lisp
  (use-package auto-save
    :quelpa (auto-save :fetcher github :repo "manateelazycat/auto-save"
                       :files ("auto-save.el"))
    :config
    (setq auto-save-delete-trailing-whitespace t)
    (setq auto-save-silent t)
    (setq auto-save-disable-predicates
          '((lambda ()
              (string-suffix-p
               "gpg"
               (file-name-extension (buffer-name)) t))))
    (auto-save-enable)
    )
#+end_src

*** mingus - music!
#+begin_src emacs-lisp
  (use-package mingus
    :bind (("H-m m" . mingus)
           ("H-m b" . mingus-browse)
           ("H-m ." . mingus-toggle))
    :config
    (evil-set-initial-state 'mingus-browser-mode 'emacs)
    (evil-set-initial-state 'mingus-playlist-mode 'emacs)
    )
#+end_src

*** darkroom
#+begin_src emacs-lisp
  (bind-key "s-f" 'darkroom-mode)
  (setq darkroom-text-scale-increase 0)
#+end_src

*** thesaurus
#+begin_src emacs-lisp
(use-package powerthesaurus
  :bind
  (("H-w" . powerthesaurus-hydra/body)))
#+end_src

*** dired-single
#+begin_src emacs-lisp
  (defun my-dired-init ()
    "Bunch of stuff to run for dired, either immediately or when it's
     loaded."
    ;; <add other stuff here>
    (define-key dired-mode-map [remap dired-find-file]
      'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
      'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory]
      'dired-single-up-directory))

  ;; if dired's already loaded, then the keymap will be bound
  (if (boundp 'dired-mode-map)
      ;; we're good to go; just add our bindings
      (my-dired-init)
    ;; it's not loaded yet, so add our bindings to the load-hook
    (add-hook 'dired-load-hook 'my-dired-init))
#+end_src

** Completion stack
*** Vertico
The main interface for completion. Comparing both selectrum and this, I decided to go with this because it is more lightweight
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+END_SRC

**** Savehist (Built-in)
In-built package that remembers the commands and such picked in the mini-buffer and places it on the top.
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+END_SRC

**** Orderless (Third-party)
Completion style that allows spaces to be included in the narrowing. Can also match candidates regardless of order the user typed
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(substring orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

*** Marginalia
For hints in the completion (eg. commands bindings/meanings)
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+END_SRC

*** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :bind (:map corfu-map
                ("C-n" . corfu-next)
                ("C-p" . corfu-previous)
                ("<escape>" . corfu-quit)
                ("<return>" . corfu-insert)
                ("M-d" . corfu-show-documentation)
                ("M-l" . corfu-show-location))
    :init
    (global-corfu-mode)
    :custom
    (corfu-auto nil)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.25)

    (corfu-min-width 80)
    (corfu-max-width corfu-min-width)
    (corfu-count 14)
    (corfu-scroll-margin 4)
    (corfu-cycle nil)

    ;; `nil' means to ignore `corfu-separator' behavior, that is, use the older
    ;; `corfu-quit-at-boundary' = nil behavior. Set this to separator if using
    ;; `corfu-auto' = `t' workflow (in that case, make sure you also set up
    ;; `corfu-separator' and a keybind for `corfu-insert-separator', which my
    ;; configuration already has pre-prepared). Necessary for manual corfu usage with
    ;; orderless, otherwise first component is ignored, unless `corfu-separator'
    ;; is inserted.
    (corfu-quit-at-boundary nil)
    (corfu-preselect-first t)

    ;; for built-in settings
    (tab-always-indent 'complete)
    (completion-cycle-threshold nil)
    )

  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
#+end_src

*** Cape
** Completion: Expansion packs
*** Embark
for flipping the usual action-item movement of M-x; allowing to first select the thing BEFORE finalizing the action to be used.
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :preface
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    (setq prefix-help-command #'embark-prefix-help-command)
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

**** COMMENT Embark as helm
Ported from [[https://karthinks.com/software/fifteen-ways-to-use-embark/][karthinks]]
#+BEGIN_SRC emacs-lisp
  (defun with-minibuffer-keymap (keymap)
    (lambda (fn &rest args)
      (minibuffer-with-setup-hook
          (lambda ()
            (use-local-map
             (make-composed-keymap keymap (current-local-map))))
        (apply fn args))))

  (defvar embark-completing-read-prompter-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "<tab>") 'abort-recursive-edit)
      map))

  (advice-add 'embark-completing-read-prompter :around
              (with-minibuffer-keymap embark-completing-read-prompter-map))
  (define-key vertico-map (kbd "<tab>") 'embark-act-with-completing-read)

  (defun embark-act-with-completing-read (&optional arg)
    (interactive "P")
    (let* ((embark-prompter 'embark-completing-read-prompter)
           (act (propertize "Act" 'face 'highlight))
           (embark-indicator (lambda (_keymap targets) nil)))
      (embark-act arg)))
#+END_SRC

*** Consult
for other useful functions
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :preface
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-g r" . consult-recent-file)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history)                ;; orig. previous-matching-history-element
           )

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    (consult-customize
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; my/command-wrapping-consult    ;; disable auto previews inside my command
     :preview-key '(:debounce 0.4 any)) ;; Option 1: Delay preview
    ;; :preview-key "M-.")            ;; Option 2: Manual preview

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")
    )
#+END_SRC
**** TODO [#A] Consult Bibtex
**** TODO [#A]  have rg functions for agenda, projects, zettls

*** TODO consult-dir
using consult for directory completion everywhere!
*** TODO compose custom keymap for direct clocking?
** TODO [#F] hippie expand
** TODO Ace-window for fast swaps
** TODO vundo for visualized undo-tree
** COMMENT Helpful for verbose help
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-c C-d" . helpful-at-point))
#+END_SRC

** TODO termkeys
[[https://github.com/CyberShadow/term-keys]]
*** TODO [#C] org-noter-pdftools
* Yza Config - Programming
** Showing diffs (git)
*** Diff-hl
** Aggressive indention
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config
    (global-aggressive-indent-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+END_SRC

** Yankpad
#+BEGIN_SRC emacs-lisp
  (use-package yankpad
    :defer 10
    :init
    (setq yankpad-file (concat yza/meta-files "yankpad.org"))
    :config
    (bind-key "<H-backspace>" 'yankpad-expand))
#+END_SRC


** TODO Paredit
** TODO Htmlize
** TODO [#G] EAF for browser?
** TODO [#D] git gutter
** TODO [#D] Projectile
** TODO Parrot?
** TODO [#C] Outshine to navigate code like org-mode?
** TODO [#G] Tree sitter for better parsing of lang?

** Language Specific
*** TODO [#B] LSP-mode for favorite programs
*** TODO Emmet mode for fast HTML/CSS
* Org-related tweaks
** Org functions
*** Function: org clock table for tag-grouping
from  this [[https://gist.github.com/ironchicken/6b5424bc2024b3d0a58a8a130f73c2ee][githubgist]]
#+BEGIN_SRC emacs-lisp
  (defun clocktable-by-tag/shift-cell (n)
    (let ((str ""))
      (dotimes (i n)
        (setq str (concat str "| ")))
      str))

  (defun clocktable-by-tag/insert-tag (params)
    (let ((tag (plist-get params :tags)))
      (insert "|--\n")
      (insert (format "| %s | *Tag time* |\n" tag))
      (let ((total 0))
        (mapcar
         (lambda (file)
           (let ((clock-data (with-current-buffer (find-file-noselect file)
                               (org-clock-get-table-data (buffer-name) params))))
             (when (> (nth 1 clock-data) 0)
               (setq total (+ total (nth 1 clock-data)))
               (insert (format "| | File *%s* | %.2f |\n"
                               (file-name-nondirectory file)
                               (/ (nth 1 clock-data) 60.0)))
               (dolist (entry (nth 2 clock-data))
                 (insert (format "| | . %s%s | %s %.2f |\n"
                                 (org-clocktable-indent-string (nth 0 entry))
                                 (nth 1 entry)
                                 (clocktable-by-tag/shift-cell (nth 0 entry))
                                 (/ (nth 4 entry) 60.0)))))))
         (org-agenda-files))
        (save-excursion
          (re-search-backward "*Tag time*")
          (org-table-next-field)
          (org-table-blank-field)
          (insert (format "*%.2f*" (/ total 60.0)))))
      (org-table-align)))

  (defun org-dblock-write:clocktable-by-tag (params)
    (insert "| Tag | Headline | Time (h) |\n")
    (insert "|     |          | <r>  |\n")
    (let ((tags (plist-get params :tags)))
      (mapcar (lambda (tag)
                (clocktable-by-tag/insert-tag (plist-put (plist-put params :match tag) :tags tag)))
              tags)))
#+END_SRC

*** Refile item to a new file
[[https://superuser.com/questions/567916/org-mode-command-to-create-new-file-from-subtree/568300#568300][got from stackoverflo w]]
- switched the command that C-u triggers (this saves the refile in the  current dir, without asking the filename--that means the default is now asking a directory)
#+BEGIN_SRC emacs-lisp
  (defun zin/org-refile-new-noselect (&optional name)
    "Cut the subtree currently being edited and create a new file
  from it.

  If called with the universal argument, prompt for new filename,
  otherwise use the subtree title."
    (interactive "P")
    (org-back-to-heading)
    (let ((filename (cond
                     (current-prefix-arg
                      (expand-file-name
                       (read-file-name "New file name: ")))
                     (t
                      (concat
                       (expand-file-name
                        (org-element-property :title
                                              (org-element-at-point))
                        default-directory)
                       ".org")))))
      (org-cut-subtree)
      (find-file-noselect filename)
      (with-temp-file filename
        (org-mode)
        (yank))))

  (defun zin/org-refile-new-select ()
    (interactive)
    (setq current-prefix-arg '(4)) ; C-u
    (call-interactively 'zin/org-refile-new-noselect))

  (define-key org-mode-map (kbd "H-\\") 'zin/org-refile-new-select)
  (define-key org-mode-map (kbd "H-|") 'zin/org-refile-new-noselect)
#+END_SRC

*** Copy link at point
:PROPERTIES:
:ID:       20220923T224009.672196
:END:
Got most of it from [[id:20220923T224009.783715][here]]
#+begin_src emacs-lisp
  (defun yza/org-extract-link (&optional arg)
    "Extract URL from org-mode link and add it to kill ring."
    (interactive "P")
    (let* ((link (org-element-lineage (org-element-context) '(link) t))
           (type (org-element-property :type link))
           (url (org-element-property :path link))
           (url (concat type ":" url)))
      (cond
       (current-prefix-arg
        (kill-new url))
       (t
        (simpleclip-set-contents url)))
      (message (concat "Copied URL: " url))))

  (define-key org-mode-map (kbd "C-c c") 'yza/org-extract-link)
#+end_src

*** COMMENT capturing org-agenda
#+begin_src emacs-lisp
  (defun save-screenshot-svg ()
    "Save a screenshot of the current frame as an SVG image.
    Saves to a chosen file and puts the filename in the kill ring."
    (interactive)
    (let* ((file-name (concat
                       (make-temp-name "Emacs-") ".svg"))
           (path "~/")
           (full-file-name (concat path file-name))
           (data (mac-export-frames nil 'png))
           (index-file-template "~/.emacs.d/org-agenda.html.template")
           (index-file (concat path "index.html")))
      (dolist
          (var (directory-files path t "Emacs.*svg"))
        (delete-file var))
      (with-temp-file full-file-name
        (insert data))
      (with-temp-file index-file
        (progn
          (insert-file-contents index-file-template)
          (goto-char (point-min))
          (while (search-forward "{{ FILENAME }}" nil t)
            (replace-match file-name t))))
      (message (concat "Saved screenshot to " file-name))))

  (defun sync-agenda-svg ()
    "Save a screenshot of the current frame as an SVG image.
    Saves to a chosen file and puts the filename in the kill ring."
    (interactive)
    (progn
      (org-agenda nil "0")
      (hl-line-mode -1)
      (org-agenda-redo-all)
      (goto-char 100000)
      (setq cursor-type nil)
      (save-screenshot-svg)
      (setq cursor-type 'box)))
#+end_src

*** Editting and joining lines like a god!
#+begin_src emacs-lisp
  (defun xah-reformat-to-sentence-lines ()
    "Break a long line or text block into multiple lines by ending period.
    Work on text selection if there is one, else the current text block.
    URL `http://xahlee.info/emacs/emacs/elisp_reformat_to_sentence_lines.html'
    Version 2020-12-02 2021-04-14 2021-08-01"
    (interactive)
    (let ($p1 $p2)
      (if (use-region-p)
          (setq $p1 (region-beginning) $p2 (region-end))
        (progn
          (if (re-search-backward "\n[ \t]*\n+" nil "move")
              (progn (re-search-forward "\n[ \t]*\n+")
                     (setq $p1 (point)))
            (setq $p1 (point)))
          (re-search-forward "\n[ \t]*\n" nil "move")
          (setq $p2 (point))))
      (save-restriction
        (narrow-to-region $p1 $p2)
        (progn (goto-char (point-min)) (while (search-forward "\n" nil t) (replace-match " " )))
        (progn (goto-char (point-min)) (while (re-search-forward "  +" nil t) (replace-match " " )))
        (progn (goto-char (point-min)) (while (re-search-forward "\\. +\\([0-9A-Za-z]+\\)" nil t) (replace-match ".\n\\1" )))
        (progn (goto-char (point-min)) (while (search-forward " <a " nil t) (replace-match "\n<a " )))
        (progn (goto-char (point-min)) (while (search-forward "</a>" nil t) (replace-match "</a>\n" )))
        (goto-char (point-max))
        (while (eq (char-before ) 32) (delete-char -1))
        (insert "\n\n"))))

  (global-set-key (kbd "M-s-k") 'org-drag-line-backward)
  (global-set-key (kbd "M-s-j") 'org-drag-line-forward)
  (define-key org-mode-map (kbd "M-s-l") 'xah-reformat-to-sentence-lines)
#+end_src

*** Custom functions (consult-ripgrep)
#+BEGIN_SRC emacs-lisp
  (defun yza/consult-org-headings-agenda ()
    (interactive)
    (consult-org-heading t 'agenda))

  (defun yza/rg-current-dir ()
    (interactive)
    (consult-ripgrep default-directory))

  (defun yza/rg-bookmarks ()
    (interactive)
    (consult-ripgrep yza/meta-files))

  (defun consult-ripgrep-single-file ()
    "Call `consult-ripgrep' for the current buffer (a single file)."
    (interactive)
    (let ((consult-project-function (lambda (x) nil))
          (consult-ripgrep-args
           (concat "rg "
                   "--null "
                   "--line-buffered "
                   "--color=never "
                   "--line-number "
                   "--smart-case "
                   "--no-heading "
                   "--max-columns=1000 "
                   "--max-columns-preview "
                   "--with-filename "
                   (shell-quote-argument buffer-file-name))))
      (consult-ripgrep)))

  (defun yza/rg-slipbox ()
    (interactive)
    (consult-ripgrep yza/slipbox-files))

  (defun yza/rg-projects ()
    (interactive)
    (consult-ripgrep yza/active-notes))

  (defun yza/rg-journal ()
    (interactive)
    (consult-ripgrep yza/journal-files))

  (defun yza/rg-archive-actions ()
    (interactive)
    (consult-ripgrep yza/action-archives))
  (defun yza/rg-archive-notes ()
    (interactive)
    (consult-ripgrep yza/allnotes-archive))

  (global-set-key (kbd "H-.") 'yza/consult-org-headings-agenda)
  (global-set-key (kbd "H-s r") 'yza/rg-slipbox)
  (global-set-key (kbd "H-s p") 'yza/rg-projects)
  (global-set-key (kbd "H-s j") 'yza/rg-journal)

  (global-set-key (kbd "H-s c") 'yza/rg-current-dir)
  (global-set-key (kbd "H-s b") 'yza/rg-bookmarks)

  (global-set-key (kbd "H-s a a") 'yza/rg-archive-actions)
  (global-set-key (kbd "H-s a n") 'yza/rg-archive-notes)

  (defun dfeich/helm-org-clock-in (marker)
    "Clock into the item at MARKER"
    (with-current-buffer (marker-buffer marker)
      (goto-char (marker-position marker))
      (org-clock-in)))

  (defun do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t))
#+END_SRC

*** List all org buffer files
function came from here
#+begin_src emacs-lisp
  (defun yza/list-opened-buffer-files ()
    "Return the list of files currently opened in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.org$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                  (buffer-list))))
#+end_src

*** org-babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (js . t)))
#+end_src

*** COMMENT DWIM org insert link
:PROPERTIES:
:ID:       2FD950D1-E037-4DE3-BB78-C7465CA7EF0B
:END:
:RELATED:
[2022-09-20 Tue 22:32] -> [[id:37D20759-9C82-4995-84BA-8A69AB2E220E][Emacs DWIM: do what ✨I✨ mean]]
:END:
#+begin_src emacs-lisp
(defun ar/org-insert-link-dwim ()
  "Like `org-insert-link' but with personal dwim preferences."
  (interactive)
  (let* ((point-in-link (org-in-regexp org-link-any-re 1))
         (clipboard-url (when (string-match-p "^http" (current-kill 0))
                          (current-kill 0)))
         (region-content (when (region-active-p)
                           (buffer-substring-no-properties (region-beginning)
                                                           (region-end)))))
    (cond ((and region-content clipboard-url (not point-in-link))
           (delete-region (region-beginning) (region-end))
           (insert (org-make-link-string clipboard-url region-content)))
          ((and clipboard-url (not point-in-link))
           (insert (org-make-link-string
                    clipboard-url
                    (read-string "title: "
                                 (with-current-buffer (url-retrieve-synchronously clipboard-url)
                                   (dom-text (car
                                              (dom-by-tag (libxml-parse-html-region
                                                           (point-min)
                                                           (point-max))
                                                          'title))))))))
          (t
           (call-interactively 'org-insert-link)))))
#+end_src

*** org-set-tags using all the tags in the org-agenda
[[https://blog.aaronbieber.com/2016/03/05/playing-tag-in-org-mode.html][blog post]]
#+begin_src emacs-lisp
  (defun air--org-swap-tags (tags)
    "Replace any tags on the current headline with TAGS.

  The assumption is that TAGS will be a string conforming to Org Mode's
  tag format specifications, or nil to remove all tags."
    (let ((old-tags (org-get-tags-string))
          (tags (if tags
                    (concat " " tags)
                  "")))
      (save-excursion
        (beginning-of-line)
        (re-search-forward
         (concat "[ \t]*" (regexp-quote old-tags) "[ \t]*$")
         (line-end-position) t)
        (replace-match tags)
        (org-set-tags t))))


  (defun air-org-set-tags (tag)
    "Add TAG if it is not in the list of tags, remove it otherwise.

  TAG is chosen interactively from the global tags completion table."
    (interactive
     (list (let ((org-last-tags-completion-table
                  (if (derived-mode-p 'org-mode)
                      (org-uniquify
                       (delq nil (append (org-get-buffer-tags)
                                         (org-global-tags-completion-table))))
                    (org-global-tags-completion-table))))
             (org-icompleting-read
              "Tag: " 'org-tags-completion-function nil nil nil
              'org-tags-history))))
    (let* ((cur-list (org-get-tags))
           (new-tags (mapconcat 'identity
                                (if (member tag cur-list)
                                    (delete tag cur-list)
                                  (append cur-list (list tag)))
                                ":"))
           (new (if (> (length new-tags) 1) (concat " :" new-tags ":")
                  nil)))
      (air--org-swap-tags new)))


  (evil-define-key 'normal org-mode-map (kbd "C-H-/") 'air-org-set-tags)
#+end_src

** Standard procedures
*** Org-agenda custom views
#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :hook ((org-agenda-mode . org-super-agenda-mode)))

  (setq org-agenda-custom-commands
        '(("0" "Focus"
           ((agenda "" ((org-agenda-span 'day)
                        (org-agenda-entry-types '(:scheduled :timestamp :sexp))
                        (org-super-agenda-groups
                         '((:discard (:log t))
                           (:name "Nice!"
                                  :todo "STICKY"
                                  :todo "DONE"
                                  :todo "CNCL")
                           ;; (:name "Longruns"
                           ;;        :and (:category "longrun" :scheduled today)
                           ;;        :and (:tag "_longrun" :scheduled today))
                           ;; (:name "Habits today"
                           ;;        :and (:todo "HABT" :scheduled today))
                           (:discard (:tag "_longrun"))
                           (:discard (:todo "HABT"))
                           (:name "Today"
                                  :tag "chill"
                                  :scheduled today
                                  :time-grid t
                                  :deadline today)
                           (:name "Past"
                                  :scheduled past)
                           (:discard (:anything t))
                           ))
                        ))
            ;; (org-ql-block '(and (not (clocked :on 0)) (todo "HABT") (tags "_daily"))
            ;;               ((org-ql-block-header "Daily Habits")))
            ;; (org-ql-block '(and (not (clocked :on -7)) (todo "HABT") (tags "_weekly"))
            ;;               ((org-ql-block-header "Weekly Habits")))
            (agenda "" ((org-agenda-span 'day)
                        (org-agenda-overriding-header "Deadlines!")
                        (org-agenda-entry-types '(:deadline))
                        (org-super-agenda-groups
                         '((:discard (:tag "lowprio"))
                           (:name "" :deadline today)
                           (:name "" :deadline future)
                           (:name "" :deadline past)
                           (:discard (:anything t))
                           ))
                        ))
            (org-ql-block '(and (not (clocked :on 0)) (tags "_longrun") (ts-active :to 0))
                          ((org-ql-block-header "Longruns!")))
            (agenda "" ((org-agenda-overriding-header "Life Routines")
                        (org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:todo "HABT")))
                           (:name "Daily" :and(:tag "_daily"))
                           (:name "Weekly" :and(:tag "_weekly"))
                           (:name "Monthly" :and(:tag "_monthly"))
                           (:name "Special" :and (:todo "HABT" :scheduled (today past)))
                           (:discard (:anything t))
                           ))
                        ))
            (agenda "" ((org-agenda-span 'day)
                        (org-agenda-overriding-header "Deadlines for Low-Prios")
                        (org-agenda-entry-types '(:deadline))
                        (org-super-agenda-groups
                         '((:discard (:not (:tag "lowprio")))
                           (:name "" :deadline today)
                           (:name "" :deadline future)
                           (:name "" :deadline past)
                           (:discard (:anything t))
                           ))
                        ))
            (agenda "" ((org-agenda-span 'day)
                        ;; (org-agenda-skip-function
                        ;;  '(org-agenda-skip-entry-if 'regexp "\\* HABT"))
                        (org-agenda-sorting-strategy '(time-up todo-state-up priority-down))))
            ))
          ("w" "Weekly Review"
           ((agenda "" ((org-agenda-start-day "-Mon")
                        (org-agenda-span 14)
                        (org-agenda-start-on-weekday 1)
                        (org-super-agenda-groups
                         '((:discard (:not (:todo "DONE")))
                           (:name "" :log clocked)
                           (:discard (:anything t))
                           )))
                    )))
          ("9" "Schedule NEXT Tasks"
           ((agenda "" ((org-agenda-span 'day))) (todo "NEXT")))
          ("n" "Agenda / INTR / PROG / NEXT"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:habit t))
                           ))))
            (todo "INTR" nil)
            (todo "PROG" nil)
            (todo "NEXT" nil)
            (agenda "" ((org-agenda-span 'day)
                        (org-agenda-overriding-header "Habits")
                        (org-super-agenda-groups
                         '((:discard (:not (:habit t)))
                           (:auto-tags t)
                           )))))
           nil)
          )
        )

#+END_SRC

*** Org-agenda use-package declaration
the tip for finding org files recursively using find-lisp is from [[https://stackoverflow.com/a/41969460][stackoverflow]]
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :preface
    (load-library "find-lisp")
    :ensure nil
    :bind (("<f9>" . org-agenda))
    :config
    :custom
    (org-agenda-files (append (find-lisp-find-files yza/agenda-files "\.org$")
                              ))
    (org-agenda-start-with-log-mode t)
    (org-agenda-skip-deadline-prewarning-if-scheduled t)
    )
#+END_SRC

*** Org-capture use-package
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :preface
    (defun yza/get-active-notes ()
      (find-lisp-find-files yza/active-notes "\.org$"))

    :ensure nil
    :bind (("<f12>" . org-capture))
    :custom
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-refile-allow-creating-parent-nodes 'confirm)
    :config
    (setq org-capture-templates
          (doct '(
                  ("Sticky" :keys "y"
                   :olp ("Reminders" "Stickies")
                   :file (lambda () (concat yza/action-files "tracker.org"))
                   :template ("* STICKY %^{Reminder} %?\nSCHEDULED: %^{Display at}t")
                   )
                  ("Link" :keys "b"
                   :unnarrowed t
                   :template ("* %(simpleclip-get-contents)")
                   :file yza/web-history-file
                   :children (("Bookmark" :keys "b"
                               :file yza/web-bookmark-file
                               :refile-targets (( yza/web-bookmark-file :maxlevel . 5))
                               :before-finalize (lambda () (org-set-property "added" (format-time-string "[%F]")))
                               :headline "^Unsorted")
                              ("History" :keys "f"
                               :datetree t)
                              ("Add to Queue" :keys "q"
                               :headline "Queue")
                              ))
                  ("Ideas" :keys "i"
                   :file (lambda () (concat yza/action-files "actionable.org"))
                   :headline "Ideas"
                   :template ("* IDEA %^{Description} %? %^g"
                              "SCHEDULED: %t"
                              ":PROPERTIES:"
                              ":created: %U"
                              ":END:"))
                  ("Actions" :keys "a"
                   :file (lambda () (concat yza/action-files "actionable.org"))
                   :children (("Single Actions" :keys "a" :todo-state "NEXT"
                               :template ("* %{todo-state}  %^{Description} %? %^g"
                                          ":PROPERTIES:"
                                          ":created: %U"
                                          ":effort: %^{Effort}"
                                          ":brainpower: %^{Brainpower (high/mid/low/chill)}"
                                          ":END:")
                               :headline "Actions")
                              ("Scheduled" :keys "s"
                               :template ("* %^{Description} %? %^g"
                                          ":PROPERTIES:"
                                          ":created: %U"
                                          ":END:")
                               :headline "Appointments")
                              ("Waiting on" :keys "w"
                               :headline "Waiting on"
                               :template ("* WAIT %^{Description}"
                                          ":PROPERTIES:"
                                          ":created: %U"
                                          ":END:"))
                              ("Multi-step" :keys "m" :todo-state ""
                               :template ("* IDEA %^{Description} %^g"
                                          ":PROPERTIES:"
                                          ":created: %U"
                                          ":END:"
                                          "%?")
                               :headline "Multi-steps")))
                  ("Fast-clocking" :keys "c"
                   :clock-in t
                   :file (lambda () (concat yza/action-files "unlisted.org"))
                   :children (("Movie!" :keys "m"
                               :template ("* TODO %^{Name} %?"
                                          ":PROPERTIES:"
                                          ":watch-with: %^{Watch with who?}"
                                          ":END:"))
                              ("Event now!" :keys "e" :todo-state "TODO"
                               :file (lambda () (concat yza/action-files "actionable.org"))
                               :headline "Appointments"
                               :template ("* %{todo-state} %^{Description} %? %^g"))
                              ("Action now (non-unique)!" :keys "n" :todo-state "NEXT"
                               :headline "Actions"
                               :template (lambda () (format-time-string "* %{todo-state} [%Y/%m/%d] %^{Description} %?")))
                              ("Action now (unplanned, unique)!" :keys "a" :todo-state "NEXT"
                               :headline "Actions"
                               :template ("* %{todo-state} %^{Description} %?"))
                              ("New web content now!" :keys "w" :todo-state "READING"
                               :headline "Web Content"
                               :clock-keep nil
                               :immediate-finish nil
                               :template ("* BACKLOG %^{Title} ([[%^{Link}][^]])%?"
                                          ":PROPERTIES:"
                                          ":added: %U"
                                          ":list-group: Web - %^{Video/Article/Wiki?}"
                                          ":published-on: %^{Published on}u"
                                          ":publisher: %^{Publisher}"
                                          ":END:")
                               )))
                  ("Record" :keys "r"
                   :file (lambda () (concat yza/action-files "data.org"))
                   :type table-line
                   :template ("| NEXT %^{Description} |")
                   :children (("daily hours" :keys "z"
                               :headline "Ideas")
                              ("sleep" :keys "z"
                               :headline "Ideas")
                              ("nihon!" :keys "n")))
                  ("Add to list" :keys "l"
                   :file (lambda () (concat yza/action-files "list.org"))
                   :template ("* BACKLOG %^{Title} %? %^g"
                              ":PROPERTIES:"
                              ":added: %U"
                              ":list-group: %^{Movie/Series/Book/Article?}"
                              "%{add-prop}"
                              ":gist: %^{Gist}"
                              ":END:"
                              )
                   :children (("book" :keys "b"
                               :add-prop ":author: %^{Author}\n:gr: %^{Goodreads}"
                               :headline "Books")
                              ("shows" :keys "s"
                               :add-prop ":director: %^{Director}\n:imdb: %^{IMDB}"
                               :headline "Shows")
                              ("web" :keys "w"
                               :headline "Web Content"
                               :template ("* BACKLOG %^{Title} ([[%^{Link}][^]])%? %^g"
                                          ":PROPERTIES:"
                                          ":added: %U"
                                          ":list-group: Web - %^{Video/Article/Wiki?}"
                                          ":published-on: %^{Published on}u"
                                          ":publisher: %^{Publisher}"
                                          ":END:"))
                              ("search" :keys "s"
                               :headline "Web Content"
                               :template ("* BACKLOG %^{Title}%? %^g"
                                          ":PROPERTIES:"
                                          ":added: %U"
                                          ":END:"))
                              ))
                  ("Scratch!" :keys "s"
                   :kill-buffer t
                   :type entry
                   :children (("current file" :keys "b"
                               :prepend t
                               :headline "^refile"
                               :hook (lambda () (call-interactively 'delete-other-windows))
                               :file buffer-name)
                              ("refile to notes' refiler" :keys "p"
                               :headline "Refile"
                               :file "~/Dropbox/org/notes/refile.org"
                               :refile-targets (( yza/get-active-notes :maxlevel . 2)))
                              ("refile to notes' refiler (focused)" :keys "f"
                               :headline "Refile"
                               :file "~/Dropbox/org/notes/refile.org"
                               :hook (lambda () (call-interactively 'delete-other-windows))
                               :refile-targets (( yza/get-active-notes :maxlevel . 2)))
                              ;; ("refile to new file (focus)" :keys "n"
                              ;;  :file denote-last-path
                              ;;  :hook (lambda () (call-interactively 'delete-other-windows))
                              ;;  :before-finalize (lambda () (call-interactively 'zin/org-refile-new-select)))
                              ))
                  ("Journal" :keys "j"
                   :unnarrowed t
                   :type plain
                   :children (("Gratitude journal" :keys "h"
                               :file (lambda () (concat yza/journal-files "gratitude.org"))
                               :template ("%^{rate}p\n1. What really happened?\n%?"
                                          "\n2. Why it happened?"
                                          "\n3. What are the 10 things I'm grateful for?"
                                          "\n4. How would I push the needle forward today?")
                               :tree-type week
                               :time-prompt t
                               :datetree t)
                              ;; ("Dreams!" :keys "z"
                              ;;  :file (lambda () (concat yza/special-journal-files "dream.org"))
                              ;;  :tree-type week
                              ;;  :datetree t)
                              )
                   )))
          )
    )
#+END_SRC

** Dependency extensions
*** org-ql
#+begin_src emacs-lisp
  (use-package org-ql)
  (use-package helm-org-ql
    :quelpa (helm-org-ql :fetcher github :repo "alphapapa/org-ql"
                         :files ("helm-org-ql.el")))
#+end_src

*** DOCT for more elegant org-capture templates
#+BEGIN_SRC emacs-lisp
  (use-package doct
    :commands (doct))
#+END_SRC

** Small Extensions
*** TODO addons from org-contrib
*** COMMENT unpackaged-extras
#+BEGIN_SRC emacs-lisp
    ;;;###autoload
  (define-minor-mode unpackaged/org-table-face-mode
    "Apply `org-table' face family to all text in Org tables.
  Useful for forcibly applying the face to portions of table data
  that might have a different face, which could affect alignment."
    :global nil
    (let ((keywords '((unpackaged/org-table-face-matcher 0 'org-table))))
      (if unpackaged/org-table-face-mode
          (font-lock-add-keywords nil keywords 'append)
        (font-lock-remove-keywords nil keywords))
      (font-lock-flush)))

  (cl-defun unpackaged/org-table-face-matcher
      (limit &optional (face `(:family ,(face-attribute 'org-table :family))))
    "Apply FACE to entire Org tables.
  A `font-lock-keywords' function that searches up to LIMIT."
    (cl-flet* ((find-face (face &optional limit not)
                          ;; Return next position up to LIMIT that has FACE, or doesn't if NOT.
                          (cl-loop with prev-pos
                                   with pos = (point)
                                   while (not (eobp))
                                   do (setf pos (next-single-property-change pos 'face nil limit))
                                   while (and pos (not (equal pos prev-pos)))
                                   for face-at = (get-text-property pos 'face)
                                   for face-matches-p = (or (eq face-at face)
                                                            (when (listp face-at)
                                                              (member face face-at)))
                                   when (or (and not (not face-matches-p))
                                            face-matches-p)
                                   return pos
                                   do (setf prev-pos pos)))
               (apply-face-from (pos face)
                                (unless (eobp)
                                  (let* ((property-at-start (get-text-property pos 'face))
                                         (table-face-start (if (or (eq property-at-start 'org-table)
                                                                   (when (listp property-at-start)
                                                                     (member 'org-table property-at-start)))
                                                               (point)
                                                             (find-face 'org-table limit)))
                                         table-face-end)
                                    (when table-face-start
                                      (goto-char table-face-start)
                                      (setf table-face-end (line-end-position))
                                      (add-face-text-property table-face-start table-face-end face)
                                      (goto-char table-face-end))))))
      (cl-loop with applied-p
               for applied = (apply-face-from (point) face)
               when applied
               do (setf applied-p t)
               while applied
               finally return applied-p)))


  (add-hook 'org-mode-hook 'unpackaged/org-table-face-mode)

#+END_SRC

*** simpleclip
:PROPERTIES:
:ID:       DB71FABC-337A-494B-8053-24FA2E1FADD2
:END:
:BACKLINKS:
[2022-08-31 Wed 22:21] <- [[id:A683B02C-08C4-4D1C-B217-07D588EB0D44][22:13 yes! finally got the bookmark saving workflow that i want!]]
:END:
#+begin_src emacs-lisp
  (use-package simpleclip
  :config
  (simpleclip-mode 1))
#+end_src

*** Org-fragtog and Org-reveal for revealing markups
Org-fragtog for viewing raw latex and svg generation
#+BEGIN_SRC emacs-lisp :export nil
  ;; (use-package org-fragtog
  ;;   :hook ((org-mode . org-fragtog-mode)))
#+END_SRC

Org-appear for general org markups
#+BEGIN_SRC emacs-lisp
  (use-package org-appear
    :hook ((org-mode . org-appear-mode)))
#+END_SRC

*** Flyspell-correct for spelling
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+END_SRC

*** Olivetti for formatting
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :hook ((org-mode . olivetti-mode)
           (markdown-mode . olivetti-mode))
    :custom
    (olivetti-body-width 175))
#+END_SRC

*** Org-download
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :defer t
    :init
    ;; Add handlers for drag-and-drop when Org is loaded.
    (with-eval-after-load 'org
      (org-download-enable))
    :config
    (add-hook 'dired-mode-hook 'org-download-enable)
    (setq-default org-download-image-dir "~/Dropbox/org/meta/attached"))
#+END_SRC

*** Org-clock-convenience
#+BEGIN_SRC emacs-lisp
  (use-package org-clock-convenience
    :bind (:map org-agenda-mode-map
                ("<H-up>" . org-clock-convenience-timestamp-up)
                ("<H-down>" . org-clock-convenience-timestamp-down)
                ("<H-left>" . org-clock-convenience-fill-gap)
                ("<H-right>" . org-clock-convenience-fill-gap-both)))
#+END_SRC

*** COMMENT org-fancy-priorities
#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :hook (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '("[*Quick]" "[*InProg]" "[MustToday]" "[MustLater]" "[ShouldToday]" "[ShouldLater]" "[Coulds]"))
    :custom
    (org-priority-lowest 71)
    (org-priority-faces (quote ((65 . "pink1") (66 . "SlateGray1") (67 . "OrangeRed") (68 . "DarkOrange1") (69 . "DarkTurquoise") (70 . "SkyBlue1") (71 . "khaki3"))))
    )
#+END_SRC

*** COMMENT Thesaurus/Dctionary combo using Merriam Webster
#+begin_src emacs-lisp
  (use-package mw-thesaurus
    :bind (:map org-mode-map ("H-z" . mw-thesaurus-lookup-dwim)))
#+end_src

*** org-edna
#+begin_src emacs-lisp
  (use-package org-edna
    :custom
    (org-edna-use-inheritance t)
    :config
    (org-edna-mode)
    )
#+end_src

*** org-super-links
#+begin_src emacs-lisp
  (use-package org-super-links
    ;; :quelpa (org-super-links :repo "toshism/org-super-links" :fetcher github :commit "0.4")
    :load-path "~/.emacs.d/external/org-super-links/"
    :bind (("C-c s s" . org-super-links-link)
           ("C-c s l" . org-super-links-store-link)
           ("C-c s C-l" . org-super-links-insert-link)
           ("C-c s d" . org-super-links-quick-insert-drawer-link)
           ("C-c s i" . org-super-links-quick-insert-inline-link)
           ("C-c s C-d" . org-super-links-delete-link))
    :config
    (setq org-super-links-related-into-drawer t
          org-super-links-link-prefix 'org-super-links-link-prefix-timestamp)
    )

  (setq org-super-links-default-description-formatter 'prompt-for-desc)
  (defun prompt-for-desc (link desc)
    (let ((new-desc (read-string "Description: " desc)))
      (if (string=  new-desc "")
          nil
        new-desc)))
#+end_src

*** org-transclusion
#+begin_src emacs-lisp
  (use-package org-transclusion
    :bind (("H-t a" . 'org-transclusion-add)
           ("H-t t" . 'org-transclusion-mode)
           ("H-t d" . 'org-transclusion-remove))
    :after org
    :config
    (setq org-transclusion-extensions'(org-transclusion-src-lines
                                       org-transclusion-font-lock
                                       org-transclusion-indent-mode
                                       ))
    )
#+end_src
*** COMMENT linkmarks for bookmarks
#+begin_src emacs-lisp
  (use-package linkmarks
    :quelpa (linkmarks :fetcher github :repo "dustinlacewell/linkmarks")
    :bind (("H-b b" . linkmarks-capture)
           ("H-b s" . linkmarks-select))
    :config
    (setq linkmarks-file (concat yza/meta-files "bookmarks.org")))
#+end_src

*** COMMENT org-starter for easy organization of refile and agenda files
#+BEGIN_SRC emacs-lisp
  (use-package org-starter
    :after org
    ;; :bind (("C-c s-w" . org-starter-refile-by-key))
    :custom
    (org-starter-path '(("~/Dropbox/org/meta/")
                        ))
    (org-starter-load-config-files t)
    :config
    (org-starter-define-directory  "~/Dropbox/org/life/dashboards/"
                                   :id "p"
                                   :refile '(:maxlevel . 3))
    (org-starter-define-file "~/Dropbox/org/life/actions/actionable.org"
                             :agenda t
                             :key "a"
                             :refile '(:maxlevel . 2))
    )
#+END_SRC

*** TODO Org-visual-outline
*** TODO Org-projectile
*** consult-notes for viewing notes
#+begin_src emacs-lisp
  (use-package consult-notes-org-roam
    :load-path "~/.emacs.d/external/consult-notes-main/"
    :ensure nil
    )

  (use-package consult-notes-denote
    :load-path "~/.emacs.d/external/consult-notes-main/"
    :ensure nil
    )

  (use-package consult-notes
    :bind (("H-]" . consult-notes))
    :commands (consult-notes
               consult-notes-search-all
               consult-notes-org-roam-find-node
               consult-notes-org-roam-find-node-relation)
    :config
    (setq consult-notes-file-dir-sources `(
                                    ;; ("Task Reviews" ?a ,(concat yza/action-archives))
                                    ;; ("Project Diaries" ?p ,(concat yza/progress-diary-files))
                                    ("Project: Fics" ?f ,(concat yza/fics))
                                    ;; ("Other notes" ?o "~/Dropbox/org/notes/")
                                    ))
    (consult-notes-org-roam-mode)
    (consult-notes-denote-mode)
    )
#+end_src

**** denote
#+begin_src emacs-lisp
  (use-package denote
    :bind
    (("H-[ [" . denote)
     ("H-[ u" . denote-rename-file-using-front-matter)
     ("H-[ r" . denote-rename-file))
    :custom
    (denote-directory "~/Dropbox/org/notes/")
    (denote-prompts '(subdirectory title keywords))
    (denote-excluded-directories-regexp "ltximg\\|\+.+"))
#+end_src

**** COMMENT org-now
#+begin_src emacs-lisp
  (use-package org-now
    :quelpa (org-now :fetcher github :repo "alphapapa/org-now")
    :bind (("s-n l" . 'org-now-link) ;; put in sticky but node stays in place
           ("s-n t" . 'org-now)
           ("s-n n" . 'org-now-refile-to-now)  ;; node get transported
           ("s-n b" . 'org-now-refile-to-previous-location))
    :config (setq org-now-location '("~/Dropbox/org/meta/sticky.org")))
#+end_src

**** org-pdftools
#+begin_src emacs-lisp

#+end_src
**** Main extensions
***** NEXT org-web-tools
***** org-journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :defer t
    :hook (after-init . evil-mode)
    :bind (("H-j j" . org-journal-new-entry)
           ("H-j s" . org-journal-search))
    :init
    ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "H-j ")
    :config
    (setq org-journal-dir yza/journal-files
          org-journal-file-type 'weekly
          org-journal-file-header "#+STARTUP: folded\n"
          org-journal-date-format "%A, %d %B %Y"
          org-journal-file-format "%Y-%m.org")
    )

#+END_SRC

***** COMMENT org-roam-bibtex
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :custom
    (orb-preformat-keywords '("citekey" "title" "url" "author-or-editor" "keywords" "file"))
    (orb-process-file-keyword t)
    (orb-file-field-extensions '("pdf"))
    (orb-roam-ref-format 'org-cite)
    )
#+end_src

***** citar
the defun came from this [[https://github.com/emacs-citar/citar/issues/431][github issue]]
#+begin_src emacs-lisp
  (use-package citar
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-at-point-function 'embark-act)

    (org-cite-global-bibliography '("~/Dropbox/org/meta/slipbox.bib"))
    (citar-bibliography org-cite-global-bibliography)

    ;; (citar-open-note-function 'my/citar-org-roam-note-format)
    ;; (citar-create-note-function 'my/citar-org-roam-note-format)

    :bind (("C-c b" . citar-insert-citation)
           ("H-r f" . citar-open)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    )
#+end_src
****** citar embark
#+begin_src emacs-lisp
  (use-package citar-embark
    :after citar embark
    :no-require
    :config (citar-embark-mode))
#+end_src
****** citar org roam
#+begin_src emacs-lisp
  (use-package citar-org-roam
    :after citar org-roam
    :no-require
    :config (citar-org-roam-mode)
    :custom
    (citar-org-roam-subdir (concat yza/slipbox-files "/references"))
    (citar-org-roam-capture-template-key "r")
    )
#+end_src

***** org-roam
Most of this came from wonderful [[https://gist.github.com/jeremyf/b1fb8414624e639c9d3b9fec2f22564a][config]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package dendroam
  ;;   :ensure nil
  ;;   :load-path "~/.emacs.d/external/dendroam/")

  (use-package org-roam
    :hook ((org-roam-mode . olivetti-mode))
    :bind
    (("H-r r" . org-roam-node-find)
     ("H-r c" . org-roam-capture)
     ("H-r i" . org-roam-node-insert)
     ("H-r t" . org-roam-buffer-toggle)
     ("H-r o" . org-roam-node-random)
     )
    :init
    (setq org-roam-completion-everywhere t)
    (setq org-roam-v2-ack t)
    (org-roam-db-autosync-mode)

    :custom
    (org-roam-directory (file-truename yza/slipbox-files))
    (org-roam-db-node-include-function
     (lambda ()
       (not (member "dontindex" (org-get-tags)))))
    :config
    (cl-defmethod org-roam-node-directories ((node org-roam-node))
      (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
          (format "(%s)" (string-join (f-split dirs) "/"))
        "(atom)"))

    (setq org-roam-node-display-template (concat (propertize "${todo:10}" 'face 'homoglyph) (propertize "${title:100} " 'face 'org-headline-todo) (propertize "${tags:20}" 'face 'org-tag) "${directories:20} ") org-roam-node-annotation-function
          (lambda (node) (marginalia--time (org-roam-node-file-mtime node))))
    )


  (defun org-rename-to-new-title ()
    (when-let*
        ((old-file (buffer-file-name))
         (is-roam-file (org-roam-file-p old-file))
         (file-node (save-excursion
                      (goto-char 1)
                      (org-roam-node-at-point)))
         (file-name  (file-name-base (org-roam-node-file file-node)))
         (file-time  (or (and (string-match "\\`\\([0-9]\\{14\\}\\)-" file-name)
                              (concat (match-string 1 file-name) "-"))
                         ""))
         (slug (org-roam-node-slug file-node))
         (new-file (expand-file-name (concat file-time slug ".org")))
         (different-name? (not (string-equal old-file new-file))))

      (rename-buffer new-file)
      (rename-file old-file new-file)
      (set-visited-file-name new-file)
      (set-buffer-modified-p nil)))

  (add-hook 'after-save-hook #'org-rename-to-new-title)
#+END_SRC
****** mini: org-buffer on the side
from the [[https://www.orgroam.com/manual.html#Configuring-the-Org_002droam-buffer-display][official docs]]
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              ;; #'org-roam-unlinked-references-section -- slow so do this in own discretion
              ))
#+end_src

****** org-roam capture templates
combining doct to org-roam came from this [[https://github.com/progfolio/doct/issues/16][issue]] and this [[https://gist.github.com/vherrmann/f9b21eeea7d7c9123dc400a30599d50d#file-doct-org-roam-el=][gist provided the doct-org-roam.el]]
#+BEGIN_SRC emacs-lisp
  (use-package doct-org-roam
    :load-path "~/.emacs.d/external/doct-org-roam")

  (setq org-roam-capture-templates
        (doct-org-roam
         '(("default (clean other windows, jump after finish)" :keys "n"
            :template "* %?"
            :type plain
            :unnarrowed t
            :file "%<%Y%m%d%H%M%S>-${slug}.org"
            :jump-to-captured t
            :hook (lambda () (call-interactively 'delete-other-windows))
            :head (""
                   ""))
           ("default (quick jot)" :keys "f"
            :template "%?"
            :type plain
            :unnarrowed t
            :file "%<%Y%m%d%H%M%S>-${slug}.org"
            :hook (lambda () (call-interactively 'delete-other-windows))
            :head (""
                   ""))
           ("ref" :keys "r"
            :template "%?"
            :type plain
            :unnarrowed t
            :file "${citar-citekey}.org"
            :jump-to-captured t
            :hook (lambda () (call-interactively 'delete-other-windows))
            :head (":PROPERTIES:"
                   ":ROAM_REFS: ${citar-citekey}"
                   ":END:"
                   "#+title: ${title}"
                   ""
                   ""))
           ("ref (aggregate, quick)" :keys "a"
            :template "%?"
            :type plain
            :unnarrowed t
            :file "short_refs.org"
            :headline "* ${title} [cite:@%^{citar-citekey}]\n%?"
            )
           )))
#+END_SRC

***** COMMENT deft
found a nice short config here in [[https://www.reddit.com/r/emacs/comments/h0h4ix/how_to_configure_multile_directories_with_deft/][this reddit thread]]
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :preface
    (defvar my/deft-dir-list '()
      "A list of deft directories to pick")

    (setq my/deft-dir-list '("~/Dropbox/org/projects/fics/"
                             "~/Dropbox/org/projects/school/"
                             "~/Dropbox/org/projects/school-agmnt/"
                             "~/Dropbox/org/projects/yza/"
                             "~/Dropbox/org/life/dashboards/"
                             ;; "~/Dropbox/org/notes/1.piles"
                             ))
    ;; (setq my/deft-dir-list '((lambda () (concat yza/active-notes "fics/"))
    ;;                          (lambda () (concat yza/active-notes "school/"))
    ;;                          ))

    (defun my/pick-deft-dir ()
      "Select directories from a list"
      (interactive)
      (setq deft-directory
            (completing-read "Select directory: " my/deft-dir-list))
      (deft-refresh))

    (defun my/prog-deft-dir (arg)
      "Select arg as deft-directory"
      (setq deft-directory arg)
      (deft-refresh))

    :bind (("H-o o" . deft)
           ("H-o p" . my/pick-deft-dir)
           :map deft-mode-map
           ("H-SPC" . deft-hydra/body))

    :commands (deft)

    :pretty-hydra
    ((:color pink :quit-key "SPC" :title "Deft")
     ("Default"
      (("k" kill-this-buffer "kill deft" :color blue)
       ("g" deft-refresh "refresh")
       ("r" deft-rename-file "rename")
       ("d" deft-delete-file "delete")
       ("a" deft-archive-file "archive")
       ("n" deft-new-file "new file"))
      "Switch Dir"
      (("0" (my/prog-deft-dir "~/Dropbox/org/life/dashboards/") "dashboards")
       ("1" (my/prog-deft-dir "~/Dropbox/org/projects/yza/") "personal")
       ("2" (my/prog-deft-dir "~/Dropbox/org/projects/fics/") "fics")
       ("3" (my/prog-deft-dir "~/Dropbox/org/projects/school-agmnt/") "sch assignments")
       ("4" (my/prog-deft-dir "~/Dropbox/org/projects/school/") "sch notes")
       )))

    :custom
    (deft-directory "~/Dropbox/org/projects/yza/")
    (deft-extensions '("org" "md" "txt"))
    (deft-use-filter-string-for-filename t)
    )
#+END_SRC

***** COMMENT org-multi-wiki
not working
#+BEGIN_SRC emacs-lisp
  (use-package org-multi-wiki
    ;; :defer t
    ;; :bind (("H-j j" . org-journal-new-entry)
    ;;        ("H-j s" . org-journal-search))
    :config
    (org-multi-wiki-global-mode 1)
    :custom
    ;; (org-multi-wiki-namespace-list '((personal (concat yza/active-notes "yza/"))))
    ;; (org-multi-wiki-namespace-list '((huh "~/Dropbox/org/projects/yza/")
    ;; (schnotes "~/Dropbox/org/projects/future.school/")
    ;; (schprojs "~/Dropbox/org/projects/future.school/projects/")
    ;; (computer "~/Dropbox/org/projects/learn.computer/")
    ;; (fandom "~/Dropbox/org/projects/social.fandom/")
    ;; (writeups "~/Dropbox/org/projects/future.writing/")
    ;; ))
    (org-multi-wiki-default-namespace 'personal)
    )
#+END_SRC

***** TODO vale for linting
[[https://emacstil.com/til/2022/03/05/setting-up-vale-prose-linter-on-emacs/][short tut]]

***** TODO reveal-js
***** TODO org-macros
* Scratch displaying useful info
#+begin_src emacs-lisp
  (defun yza/gen-scratch-info ()
    (let ((package-count 0) (time (emacs-init-time)))
      (when (bound-and-true-p package-alist)
        (setq package-count (length package-activated-list)))
      (when (boundp 'straight--profile-cache)
        (setq package-count (+ (hash-table-count straight--profile-cache) package-count)))
      (setq yza/scratch-info (format "%d packages loaded in %s" package-count time))
      )
    )
  (setq yza/title ";;
;; :::   ::: :::::::::     :::     ::::    ::::      :::      ::::::::   ::::::::          :::
;; :+:   :+:      :+:    :+: :+:   +:+:+: :+:+:+   :+: :+:   :+:    :+: :+:    :+:     :+:  :+:
;;  +:+ +:+      +:+    +:+   +:+  +:+ +:+:+ +:+  +:+   +:+  +:+        +:+                  +:+
;;   +#++:      +#+    +#++:++#++: +#+  +:+  +#+ +#++:++#++: +#+        +#++:++#++           +#+
;;    +#+      +#+     +#+     +#+ +#+       +#+ +#+     +#+ +#+               +#+           +#+
;;    #+#     #+#      #+#     #+# #+#       #+# #+#     #+# #+#    #+# #+#    #+#     #+#  #+#
;;    ###    ######### ###     ### ###       ### ###     ###  ########   ########          ###
;;")
  (add-hook 'after-init-hook (lambda() (yza/gen-scratch-info) (setq initial-scratch-message (concat yza/title "\n;; " yza/scratch-info "\n;;"))))
#+end_src
